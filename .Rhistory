temp$alg <- algorithm
temp <- temp |> select(alg,state,everything())
loglik_visited <- rbind(loglik_visited,temp)
#Storing likelihood of visited states
temp <- as.data.frame(data[["loglik_visited"]])
colnames(temp) <- 1:ncol(temp)
temp$state <- 1:nrow(temp)
temp$alg <- algorithm
temp <- temp |> select(alg,state,everything())
iter_visit <- rbind(iter_visit,temp)
#Storing full list of states
list_of_states[[Q]] <- data[["states"]]
#Extract number of round trips rate
temp <- as.data.frame(data[["round_trips"]])
colnames(temp) <- 1:ncol(temp)
temp$sim <- 1:tot_sim
temp$alg <- algorithm
temp <- temp |> select(alg,sim,everything())
round_trip <- rbind(round_trip,temp)
# Extract replica swap rate
temp <- as.data.frame(data[["swap_rate"]])
colnames(temp) <- 1:ncol(temp)
temp$sim <- 1:tot_sim
temp$alg <- algorithm
temp <- temp |> select(alg,sim,everything())
swap_rate <- rbind(swap_rate,temp)
algorithm
# Extract total iterations
dims<- dim(data[["total_iter"]])
full_iter[[k]] <- data[["total_iter"]]
k <- k+1;
temp <- as.data.frame(t(colSums(data[["total_iter"]])))/dims[1]
#temp is the average number of Rejection Free steps before trying a swap
colnames(temp) <- 1:ncol(temp)
temp$sim <- 1:tot_sim
temp$alg <- algorithm
temp <- temp |> select(alg,sim,everything())
iterations <- rbind(iterations,temp)
iterations
# Extract total iterations
dims<- dim(data[["total_iter"]])
full_iter[[k]] <- data[["total_iter"]]
temp <- as.data.frame(t(colSums(data[["total_iter"]])))/dims[1]
dim(temp)
temp
#temp is the average number of Rejection Free steps before trying a swap
colnames(temp) <- 1:ncol(temp)
head(temp)
temp$sim <- 1:tot_sim
temp$alg <- algorithm
head(temp)
temp <- temp |> select(alg,sim,everything())
head(temp)
iterations
iterations <- as.data.frame(matrix(NA,ncol=5)); colnames(iterations) <- c("alg","sim",1:3)
iterations <- rbind(iterations,temp)
head(list_of_states)
head(iter_visit)
head(loglik_visited)
rm(list=ls())
# Import libraries
library(stringr)
library(tidyverse)
library(gridExtra)# For tables
library(latex2exp) #For using latex
### Process simulation results ###
# Choose dimension
chosen_dim <- "highdim"; file_dim <- "highd"
# chosen_dim <- "lowdim";file_dim <- "lowd"
#List of files
parameters <- read_csv(paste0("results/simulation_details_",file_dim,".csv"))
#Create table with available files
data_sum <- tibble(file_names=list.files(path = "results", pattern = "^sim_.*\\.Rds")) |>
mutate(id=as.numeric(str_extract(file_names, "(?<=id_)[0-9]+(?=\\.Rds)")),
dim=str_extract(file_names, "(?<=sim_)[^_]+(?=_id)")) |>
filter(dim==chosen_dim) |>
left_join(parameters, by="id")
# filter IDs to compare
chosen_ids <- 8#c(13,14,15,16)#c(9,10,11,12)
data_sum <- data_sum |> filter(id %in% chosen_ids)
if(chosen_dim=="lowdim"){
#Low dim is the example with 7 modes and 4 temperatures
tvd <- data.frame(alg=NA,sim=NA,tvd=NA)
mode_visit <- as.data.frame(matrix(NA,ncol=9)); colnames(mode_visit) <- c("alg","sim",1:7)
round_trip <- as.data.frame(matrix(NA,ncol=6)); colnames(round_trip) <- c("alg","sim",1:4)
swap_rate <- as.data.frame(matrix(NA,ncol=5)); colnames(swap_rate) <- c("alg","sim",1:3)
iterations <- as.data.frame(matrix(NA,ncol=6)); colnames(iterations) <- c("alg","sim",1:4)
}
if(chosen_dim=="highdim"){
#High dim we have 3 temperatures
#we dont track distribution convergence
#we track visit to high probability states
round_trip <- as.data.frame(matrix(NA,ncol=5)); colnames(round_trip) <- c("alg","sim",1:3)
swap_rate <- as.data.frame(matrix(NA,ncol=4)); colnames(swap_rate) <- c("alg","sim",1:2)
iterations <- as.data.frame(matrix(NA,ncol=5)); colnames(iterations) <- c("alg","sim",1:3)
list_of_states <- list()
iter_visit <- as.data.frame(matrix(NA,ncol=max(data_sum$simulations)+2));colnames(iter_visit) <- c("alg","state",1:max(data_sum$simulations))
loglik_visited <- as.data.frame(matrix(NA,ncol=max(data_sum$simulations)+2));colnames(loglik_visited) <- c("alg","state",1:max(data_sum$simulations))
}
full_iter <- list()
k <- 1
Q <- 1
# Start creating datasets with information
for(i in 1:nrow(data_sum)){
data <- readRDS(file.path("results",data_sum[i,1]))
tot_sim <- data_sum |> slice(i)|> pull(simulations)
algorithm <- data_sum |> slice(i) |> pull(algorithm)
if(algorithm=="PT_A_IIT"){algorithm <- "PT A-IIT"}
if(algorithm=="PT_IIT_no_Z"){algorithm <- "PT-IIT no Z"}
if(algorithm=="PT_IIT_Z"){algorithm <- "PT-IIT w Z"}
print(data_sum[i,"algorithm"])
print(names(data))
if(chosen_dim=="lowdim"){
# Extract TVD
temp <- tibble(alg=algorithm,sim=1:tot_sim,tvd=data[["tvd"]])
tvd <- rbind(tvd,temp)
# Extract visit of modes
temp <- as.data.frame(data[["mode_visit"]])
colnames(temp) <- 1:ncol(temp)
temp$sim <- 1:tot_sim
temp$alg <- algorithm
temp <- temp |> select(alg,sim,everything())
mode_visit <- rbind(mode_visit,temp)
}
if(chosen_dim=="highdim"){
#Storing number of iterations to visit modes
temp <- as.data.frame(data[["iter_visit"]])
colnames(temp) <- 1:ncol(temp)
temp$state <- 1:nrow(temp)
temp$alg <- algorithm
temp <- temp |> select(alg,state,everything())
iter_visit <- rbind(iter_visit,temp)
#Storing likelihood of visited states
temp <- as.data.frame(data[["loglik_visited"]])
colnames(temp) <- 1:ncol(temp)
temp$state <- 1:nrow(temp)
temp$alg <- algorithm
temp <- temp |> select(alg,state,everything())
loglik_visited <- rbind(loglik_visited,temp)
#Storing full list of states
list_of_states[[Q]] <- data[["states"]]
Q <- Q+1
}
if(algorithm!='IIT'){
#Extract number of round trips rate
temp <- as.data.frame(data[["round_trips"]])
colnames(temp) <- 1:ncol(temp)
temp$sim <- 1:tot_sim
temp$alg <- algorithm
temp <- temp |> select(alg,sim,everything())
round_trip <- rbind(round_trip,temp)
# Extract replica swap rate
temp <- as.data.frame(data[["swap_rate"]])
colnames(temp) <- 1:ncol(temp)
temp$sim <- 1:tot_sim
temp$alg <- algorithm
temp <- temp |> select(alg,sim,everything())
swap_rate <- rbind(swap_rate,temp)
}
if(algorithm=="PT A-IIT"){
# Extract total iterations
dims<- dim(data[["total_iter"]])
full_iter[[k]] <- data[["total_iter"]]
k <- k+1;
temp <- as.data.frame(t(colSums(data[["total_iter"]])))/dims[1]
#temp is the average number of Rejection Free steps before trying a swap
colnames(temp) <- 1:ncol(temp)
temp$sim <- 1:tot_sim
temp$alg <- algorithm
temp <- temp |> select(alg,sim,everything())
iterations <- rbind(iterations,temp)
}
}
##### Delete first row with NA#####
tvd <-  tvd |> filter(!is.na(alg))
rm(list=ls())
# Import libraries
library(stringr)
library(tidyverse)
library(gridExtra)# For tables
library(latex2exp) #For using latex
### Process simulation results ###
# Choose dimension
chosen_dim <- "highdim"; file_dim <- "highd"
# chosen_dim <- "lowdim";file_dim <- "lowd"
#List of files
parameters <- read_csv(paste0("results/simulation_details_",file_dim,".csv"))
#Create table with available files
data_sum <- tibble(file_names=list.files(path = "results", pattern = "^sim_.*\\.Rds")) |>
mutate(id=as.numeric(str_extract(file_names, "(?<=id_)[0-9]+(?=\\.Rds)")),
dim=str_extract(file_names, "(?<=sim_)[^_]+(?=_id)")) |>
filter(dim==chosen_dim) |>
left_join(parameters, by="id")
# filter IDs to compare
chosen_ids <- 8#c(13,14,15,16)#c(9,10,11,12)
data_sum <- data_sum |> filter(id %in% chosen_ids)
if(chosen_dim=="lowdim"){
#Low dim is the example with 7 modes and 4 temperatures
tvd <- data.frame(alg=NA,sim=NA,tvd=NA)
mode_visit <- as.data.frame(matrix(NA,ncol=9)); colnames(mode_visit) <- c("alg","sim",1:7)
round_trip <- as.data.frame(matrix(NA,ncol=6)); colnames(round_trip) <- c("alg","sim",1:4)
swap_rate <- as.data.frame(matrix(NA,ncol=5)); colnames(swap_rate) <- c("alg","sim",1:3)
iterations <- as.data.frame(matrix(NA,ncol=6)); colnames(iterations) <- c("alg","sim",1:4)
}
if(chosen_dim=="highdim"){
#High dim we have 3 temperatures
#we dont track distribution convergence
#we track visit to high probability states
round_trip <- as.data.frame(matrix(NA,ncol=5)); colnames(round_trip) <- c("alg","sim",1:3)
swap_rate <- as.data.frame(matrix(NA,ncol=4)); colnames(swap_rate) <- c("alg","sim",1:2)
iterations <- as.data.frame(matrix(NA,ncol=5)); colnames(iterations) <- c("alg","sim",1:3)
list_of_states <- list()
iter_visit <- as.data.frame(matrix(NA,ncol=max(data_sum$simulations)+2));colnames(iter_visit) <- c("alg","state",1:max(data_sum$simulations))
loglik_visited <- as.data.frame(matrix(NA,ncol=max(data_sum$simulations)+2));colnames(loglik_visited) <- c("alg","state",1:max(data_sum$simulations))
}
full_iter <- list()
k <- 1
Q <- 1
data_sum
# Start creating datasets with information
for(i in 1:nrow(data_sum)){
data <- readRDS(file.path("results",data_sum[i,1]))
tot_sim <- data_sum |> slice(i)|> pull(simulations)
algorithm <- data_sum |> slice(i) |> pull(algorithm)
if(algorithm=="PT_A_IIT"){algorithm <- "PT A-IIT"}
if(algorithm=="PT_IIT_no_Z"){algorithm <- "PT-IIT no Z"}
if(algorithm=="PT_IIT_Z"){algorithm <- "PT-IIT w Z"}
print(data_sum[i,"algorithm"])
print(names(data))
if(chosen_dim=="lowdim"){
# Extract TVD
temp <- tibble(alg=algorithm,sim=1:tot_sim,tvd=data[["tvd"]])
tvd <- rbind(tvd,temp)
# Extract visit of modes
temp <- as.data.frame(data[["mode_visit"]])
colnames(temp) <- 1:ncol(temp)
temp$sim <- 1:tot_sim
temp$alg <- algorithm
temp <- temp |> select(alg,sim,everything())
mode_visit <- rbind(mode_visit,temp)
}
if(chosen_dim=="highdim"){
#Storing number of iterations to visit modes
temp <- as.data.frame(data[["iter_visit"]])
colnames(temp) <- 1:ncol(temp)
temp$state <- 1:nrow(temp)
temp$alg <- algorithm
temp <- temp |> select(alg,state,everything())
iter_visit <- rbind(iter_visit,temp)
#Storing likelihood of visited states
temp <- as.data.frame(data[["loglik_visited"]])
colnames(temp) <- 1:ncol(temp)
temp$state <- 1:nrow(temp)
temp$alg <- algorithm
temp <- temp |> select(alg,state,everything())
loglik_visited <- rbind(loglik_visited,temp)
#Storing full list of states
list_of_states[[Q]] <- data[["states"]]
Q <- Q+1
}
if(algorithm!='IIT'){
#Extract number of round trips rate
temp <- as.data.frame(data[["round_trips"]])
colnames(temp) <- 1:ncol(temp)
temp$sim <- 1:tot_sim
temp$alg <- algorithm
temp <- temp |> select(alg,sim,everything())
round_trip <- rbind(round_trip,temp)
# Extract replica swap rate
temp <- as.data.frame(data[["swap_rate"]])
colnames(temp) <- 1:ncol(temp)
temp$sim <- 1:tot_sim
temp$alg <- algorithm
temp <- temp |> select(alg,sim,everything())
swap_rate <- rbind(swap_rate,temp)
}
if(algorithm=="PT A-IIT"){
# Extract total iterations
dims<- dim(data[["total_iter"]])
full_iter[[k]] <- data[["total_iter"]]
k <- k+1;
temp <- as.data.frame(t(colSums(data[["total_iter"]])))/dims[1]
#temp is the average number of Rejection Free steps before trying a swap
colnames(temp) <- 1:ncol(temp)
temp$sim <- 1:tot_sim
temp$alg <- algorithm
temp <- temp |> select(alg,sim,everything())
iterations <- rbind(iterations,temp)
}
}
##### Delete first row with NA#####
tvd <-  tvd |> filter(!is.na(alg))
mode_visit <- mode_visit |> filter(!is.na(alg))
round_trip <- round_trip |> filter(!is.na(alg))
swap_rate <- swap_rate |> filter(!is.na(alg))
iterations <- iterations |> filter(!is.na(alg))
loglik_visited <- loglik_visited |> filter(!is.na(alg))
iter_visit <- iter_visit
swap_rate
swap_rate
iterations
2500/200
swap_rate
rm(list=ls())
# Import libraries
library(stringr)
library(tidyverse)
library(gridExtra)# For tables
library(latex2exp) #For using latex
### Process simulation results ###
# Choose dimension
chosen_dim <- "highdim"; file_dim <- "highd"
# chosen_dim <- "lowdim";file_dim <- "lowd"
#List of files
parameters <- read_csv(paste0("results/simulation_details_",file_dim,".csv"))
#Create table with available files
data_sum <- tibble(file_names=list.files(path = "results", pattern = "^sim_.*\\.Rds")) |>
mutate(id=as.numeric(str_extract(file_names, "(?<=id_)[0-9]+(?=\\.Rds)")),
dim=str_extract(file_names, "(?<=sim_)[^_]+(?=_id)")) |>
filter(dim==chosen_dim) |>
left_join(parameters, by="id")
# filter IDs to compare
chosen_ids <- 4#c(13,14,15,16)#c(9,10,11,12)
data_sum <- data_sum |> filter(id %in% chosen_ids)
if(chosen_dim=="lowdim"){
#Low dim is the example with 7 modes and 4 temperatures
tvd <- data.frame(alg=NA,sim=NA,tvd=NA)
mode_visit <- as.data.frame(matrix(NA,ncol=9)); colnames(mode_visit) <- c("alg","sim",1:7)
round_trip <- as.data.frame(matrix(NA,ncol=6)); colnames(round_trip) <- c("alg","sim",1:4)
swap_rate <- as.data.frame(matrix(NA,ncol=5)); colnames(swap_rate) <- c("alg","sim",1:3)
iterations <- as.data.frame(matrix(NA,ncol=6)); colnames(iterations) <- c("alg","sim",1:4)
}
if(chosen_dim=="highdim"){
#High dim we have 3 temperatures
#we dont track distribution convergence
#we track visit to high probability states
round_trip <- as.data.frame(matrix(NA,ncol=5)); colnames(round_trip) <- c("alg","sim",1:3)
swap_rate <- as.data.frame(matrix(NA,ncol=4)); colnames(swap_rate) <- c("alg","sim",1:2)
iterations <- as.data.frame(matrix(NA,ncol=5)); colnames(iterations) <- c("alg","sim",1:3)
list_of_states <- list()
iter_visit <- as.data.frame(matrix(NA,ncol=max(data_sum$simulations)+2));colnames(iter_visit) <- c("alg","state",1:max(data_sum$simulations))
loglik_visited <- as.data.frame(matrix(NA,ncol=max(data_sum$simulations)+2));colnames(loglik_visited) <- c("alg","state",1:max(data_sum$simulations))
}
full_iter <- list()
k <- 1
Q <- 1
# Start creating datasets with information
for(i in 1:nrow(data_sum)){
data <- readRDS(file.path("results",data_sum[i,1]))
tot_sim <- data_sum |> slice(i)|> pull(simulations)
algorithm <- data_sum |> slice(i) |> pull(algorithm)
if(algorithm=="PT_A_IIT"){algorithm <- "PT A-IIT"}
if(algorithm=="PT_IIT_no_Z"){algorithm <- "PT-IIT no Z"}
if(algorithm=="PT_IIT_Z"){algorithm <- "PT-IIT w Z"}
print(data_sum[i,"algorithm"])
print(names(data))
if(chosen_dim=="lowdim"){
# Extract TVD
temp <- tibble(alg=algorithm,sim=1:tot_sim,tvd=data[["tvd"]])
tvd <- rbind(tvd,temp)
# Extract visit of modes
temp <- as.data.frame(data[["mode_visit"]])
colnames(temp) <- 1:ncol(temp)
temp$sim <- 1:tot_sim
temp$alg <- algorithm
temp <- temp |> select(alg,sim,everything())
mode_visit <- rbind(mode_visit,temp)
}
if(chosen_dim=="highdim"){
#Storing number of iterations to visit modes
temp <- as.data.frame(data[["iter_visit"]])
colnames(temp) <- 1:ncol(temp)
temp$state <- 1:nrow(temp)
temp$alg <- algorithm
temp <- temp |> select(alg,state,everything())
iter_visit <- rbind(iter_visit,temp)
#Storing likelihood of visited states
temp <- as.data.frame(data[["loglik_visited"]])
colnames(temp) <- 1:ncol(temp)
temp$state <- 1:nrow(temp)
temp$alg <- algorithm
temp <- temp |> select(alg,state,everything())
loglik_visited <- rbind(loglik_visited,temp)
#Storing full list of states
list_of_states[[Q]] <- data[["states"]]
Q <- Q+1
}
if(algorithm!='IIT'){
#Extract number of round trips rate
temp <- as.data.frame(data[["round_trips"]])
colnames(temp) <- 1:ncol(temp)
temp$sim <- 1:tot_sim
temp$alg <- algorithm
temp <- temp |> select(alg,sim,everything())
round_trip <- rbind(round_trip,temp)
# Extract replica swap rate
temp <- as.data.frame(data[["swap_rate"]])
colnames(temp) <- 1:ncol(temp)
temp$sim <- 1:tot_sim
temp$alg <- algorithm
temp <- temp |> select(alg,sim,everything())
swap_rate <- rbind(swap_rate,temp)
}
if(algorithm=="PT A-IIT"){
# Extract total iterations
dims<- dim(data[["total_iter"]])
full_iter[[k]] <- data[["total_iter"]]
k <- k+1;
temp <- as.data.frame(t(colSums(data[["total_iter"]])))/dims[1]
#temp is the average number of Rejection Free steps before trying a swap
colnames(temp) <- 1:ncol(temp)
temp$sim <- 1:tot_sim
temp$alg <- algorithm
temp <- temp |> select(alg,sim,everything())
iterations <- rbind(iterations,temp)
}
}
##### Delete first row with NA#####
tvd <-  tvd |> filter(!is.na(alg))
swap_rate
library(Rcpp)
library(RcppArmadillo)
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
p <- 800
set.seed(123)
#PT_a_IIT_sim(int p,int startsim,int endsim, int total_swaps,int sample_inter_swap,int burn_in, vec temp, const std::vector<std::string>& bal_function,const std::string& filename,int num_states_visited)
check3 <- PT_a_IIT_sim(p,1,2,5,100,10,temperature,bal_f,"gset/G1.txt",20)
p <- 800
temperature <- c(1,0.6,0.4)
bal_f <- c("sq","sq","sq")
set.seed(123)
#PT_a_IIT_sim(int p,int startsim,int endsim, int total_swaps,int sample_inter_swap,int burn_in, vec temp, const std::vector<std::string>& bal_function,const std::string& filename,int num_states_visited)
check3 <- PT_a_IIT_sim(p,1,2,5,100,10,temperature,bal_f,"gset/G1.txt",20)
names(check3)
check3
PT_a_IIT_sim(p,1,2,5,100,200,temperature,bal_f,"gset/G1.txt",20)
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
p <- 800
temperature <- c(1,0.6,0.4)
bal_f <- c("sq","sq","sq")
set.seed(123)
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
#PT_a_IIT_sim(int p,int startsim,int endsim, int total_swaps,int sample_inter_swap,int burn_in, vec temp, const std::vector<std::string>& bal_function,const std::string& filename,int num_states_visited)
check3 <- PT_a_IIT_sim(p,1,2,5,100,200,temperature,bal_f,"gset/G1.txt",20)
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
#PT_a_IIT_sim(int p,int startsim,int endsim, int total_swaps,int sample_inter_swap,int burn_in, vec temp, const std::vector<std::string>& bal_function,const std::string& filename,int num_states_visited)
check3 <- PT_a_IIT_sim(p,1,2,5,100,200,temperature,bal_f,"gset/G1.txt",20)
names(check3)
check3$ip
check3$swap_rate
check3$states
names(check3)
check3$loglik_visited
exp(check3$loglik_visited)
log(11624)
check3$loglik_visited
names(check3)
check$iter_
check$iter_visit
check3$iter_visit
check3$total_iter
#PT_a_IIT_sim(int p,int startsim,int endsim, int total_swaps,int sample_inter_swap,int burn_in, vec temp, const std::vector<std::string>& bal_function,const std::string& filename,int num_states_visited)
check3 <- PT_a_IIT_sim(p,1,2,5,100,200,temperature,bal_f,"gset/G1.txt",20)
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
#PT_a_IIT_sim(int p,int startsim,int endsim, int total_swaps,int sample_inter_swap,int burn_in, vec temp, const std::vector<std::string>& bal_function,const std::string& filename,int num_states_visited)
check3 <- PT_a_IIT_sim(p,1,2,5,100,200,temperature,bal_f,"gset/G1.txt",20)
names(check3)
#PT_IIT_sim(int p,int startsim,int endsim, int numiter, int iterswap,int burn_in, vec temp, const std::vector<std::string>& bal_function, bool bias_fix,const std::string& filename,int num_states_visited)
set.seed(123)
check <- PT_IIT_sim(p,1,2,500,100,200,temperature,bal_f,TRUE,"gset/G1.txt",20)
#PT_IIT_sim(int p,int startsim,int endsim, int numiter, int iterswap,int burn_in, vec temp, const std::vector<std::string>& bal_function, bool bias_fix,const std::string& filename,int num_states_visited)
set.seed(123)
check <- PT_IIT_sim(p,1,2,500,100,200,temperature,bal_f,TRUE,"gset/G1.txt",20)
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
#PT_IIT_sim(int p,int startsim,int endsim, int numiter, int iterswap,int burn_in, vec temp, const std::vector<std::string>& bal_function, bool bias_fix,const std::string& filename,int num_states_visited)
set.seed(123)
check <- PT_IIT_sim(p,1,2,500,100,200,temperature,bal_f,TRUE,"gset/G1.txt",20)
#(int p,int startsim,int endsim, int numiter,int iterswap, vec temp, const std::vector<std::string>& bal_function, bool bias_fix,const std::string& filename,int num_states_visited)
set.seed(123)
check2 <- PT_IIT_sim(p,1,2,500,100,200,temperature,bal_f,FALSE,"gset/G1.txt",20)
dgeom(3,.2809)
dgeom(30,.2809)
pgeom(30,.2809)
pgeom(3,.2809)
?pgeom
pgeom(2,.2809)
pgeom(2,.3118)
25+40
65/2
25+65
5000/1002
-5+5000/1002
(-5+5000/1002)*(sqrt(1002)/sqrt(0.04))
a <- (-5+5000/1002)*(sqrt(1002)/sqrt(0.04))
pnorm(a)
b <- (-4.99+5000/1002)*(sqrt(1002)/sqrt(0.04))
a
b
pnorm(b)
sqrt(1002/.04)
5000/1002
sqrt(1002)/sqrt(0.04)
5000/1002-5
-0.00998004*158
5000/1002
a
b
5000/1002-4.99
(-4.99+5000/1002)*(sqrt(1002)/sqrt(0.04))
a
pnorm(1,2,1/36)
1-pnorm(1,2,1/36)
