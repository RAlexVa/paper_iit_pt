total = total+exp(-theta*sum(abs(X-modes_list[[m]])))
}
return(log(total));
}
pi.true <- rep(0,2^p)
for(i in 0:(2^p -1)){
pi.true[i+1] <-  ll_comp(NumberToVector(i,p),theta)
}
sum(pi.true)
sum(exp(pi.true))
(length(modes_list)*(1+exp(-theta))^p)
#True probability
pi.true <- exp(pi.true)/(length(modes_list)*(1+exp(-theta))^p)
pi.true[modes+1]
sum(pi.true[modes+1])
d
p
##### Running simulations #####
set.seed(123)
total_iter <- 300000
ex1 <- PT_IIT_sim(p,startsim=1, endsim=1,numiter=total_iter,iterswap=1000,temp=c(1,0.1,0.01),bal_function=c("sq","sq","sq"), bias_fix = TRUE)
##### Low-dimensional multimodal example #####
Rcpp::sourceCpp("functions/cpp_functions.cpp")
##### Running simulations #####
set.seed(123)
total_iter <- 300000
ex1 <- PT_IIT_sim(p,startsim=1, endsim=1,numiter=total_iter,iterswap=1000,temp=c(1,0.1,0.01),bal_function=c("sq","sq","sq"), bias_fix = TRUE)
pi.est <- ex1[[1]]/sum(ex1[[1]])
TVD(pi.est,pi.true)
ex1[[4]]
##### Running simulations #####
set.seed(123)
total_iter <- 300000
ex1 <- PT_IIT_sim(p,startsim=1, endsim=1,numiter=total_iter,iterswap=1000,temp=c(1,0.5,0.1,0.01),bal_function=c("sq","sq","sq","sq"), bias_fix = TRUE)
pi.est <- ex1[[1]]/sum(ex1[[1]])
TVD(pi.est,pi.true)
ex1[[4]]
##### Running simulations #####
set.seed(123)
total_iter <- 300000
ex1 <- PT_IIT_sim(p,startsim=1, endsim=1,numiter=total_iter,iterswap=1000,temp=c(1,0.3,0.1,0.01),bal_function=c("sq","sq","sq","sq"), bias_fix = TRUE)
pi.est <- ex1[[1]]/sum(ex1[[1]])
TVD(pi.est,pi.true)
ex1[[4]]
##### Running simulations #####
set.seed(123)
total_iter <- 300000
ex1 <- PT_IIT_sim(p,startsim=1, endsim=1,numiter=total_iter,iterswap=1000,temp=c(1,0.2,0.1,0.01),bal_function=c("sq","sq","sq","sq"), bias_fix = TRUE)
pi.est <- ex1[[1]]/sum(ex1[[1]])
TVD(pi.est,pi.true)
ex1[[4]]
ex1[[3]]
ex1[[3]][modes+1]
pi.est <- ex1[[1]]/sum(ex1[[1]])
TVD(pi.est,pi.true)
ex1[[4]]
ex1[[4]]
ex1[[3]][modes+1]
total_iter/2000
ex1 <- PT_IIT_sim(p,startsim=1, endsim=1,numiter=total_iter,iterswap=2000,temp=c(1,0.2,0.1,0.01),bal_function=c("sq","sq","sq","sq"), bias_fix = TRUE)
length(pi.true)
sum(pi.true)
TVD(pi.est,pi.true)
ex1[[4]]
##### Running simulations #####
set.seed(123)
total_iter <- 300000
ex1 <- PT_IIT_sim(p,startsim=1, endsim=1,numiter=total_iter,iterswap=2000,temp=c(1,0.1,0.01),bal_function=c("sq","sq","sq","sq"), bias_fix = TRUE)
pi.est <- ex1[[1]]/sum(ex1[[1]])
TVD(pi.est,pi.true)
ex1[[4]]
##### Running simulations #####
set.seed(123)
total_iter <- 300000
ex1 <- PT_IIT_sim(p,startsim=1, endsim=1,numiter=total_iter,iterswap=2000,temp=c(1,0.15,0.01),bal_function=c("sq","sq","sq","sq"), bias_fix = TRUE)
pi.est <- ex1[[1]]/sum(ex1[[1]])
TVD(pi.est,pi.true)
ex1[[4]]
##### Running simulations #####
set.seed(123)
total_iter <- 300000
ex1 <- PT_IIT_sim(p,startsim=1, endsim=1,numiter=total_iter,iterswap=2000,temp=c(1,0.15,0.5),bal_function=c("sq","sq","sq","sq"), bias_fix = TRUE)
pi.est <- ex1[[1]]/sum(ex1[[1]])
TVD(pi.est,pi.true)
ex1[[4]]
ex1[[3]][modes+1]
pi.est[modes+1]
sum(pi.est[modes+1])
modes
NumberToVector(32769)
NumberToVector(32769,p)
NumberToVector(255,p)
NumberToVector(384,p)
##### Running simulations #####
set.seed(123)
total_iter <- 300000
ex1 <- PT_IIT_sim(p,startsim=1, endsim=1,numiter=total_iter,iterswap=2000,temp=c(1,0.2,0.1,0.05),bal_function=c("sq","sq","sq","sq"), bias_fix = TRUE)
pi.est <- ex1[[1]]/sum(ex1[[1]])
TVD(pi.est,pi.true)
ex1[[4]]
##### Running simulations #####
set.seed(123)
total_iter <- 300000
ex1 <- PT_IIT_sim(p,startsim=1, endsim=1,numiter=total_iter,iterswap=2000,temp=c(1,0.2,0.1,0.01),bal_function=c("sq","sq","sq","sq"), bias_fix = TRUE)
pi.est <- ex1[[1]]/sum(ex1[[1]])
TVD(pi.est,pi.true)
ex1[[4]]
ex1[[3]][modes+1]
pi.est[modes+1]
modes
##### Running simulations #####
set.seed(123)
total_iter <- 300000
ex1 <- PT_IIT_sim(p,startsim=1, endsim=1,numiter=total_iter,iterswap=2000,temp=c(1,0.15,0.05,0.01),bal_function=c("sq","sq","sq","sq"), bias_fix = TRUE)
pi.est <- ex1[[1]]/sum(ex1[[1]])
TVD(pi.est,pi.true)
ex1[[4]]
ex1 <- PT_IIT_sim(p,startsim=1, endsim=1,numiter=total_iter,iterswap=1000,temp=c(1,0.2,0.1,0.01),bal_function=c("sq","sq","sq","sq"), bias_fix = TRUE)
pi.est <- ex1[[1]]/sum(ex1[[1]])
TVD(pi.est,pi.true)
ex1[[4]]
ex1[[3]][modes+1]
ex1 <- PT_IIT_sim(p,startsim=1, endsim=1,numiter=total_iter,iterswap=1000,temp=c(1,0.2,0.1,0.01),bal_function=c("sq","sq","sq","sq"), bias_fix = TRUE)
pi.est <- ex1[[1]]/sum(ex1[[1]])
TVD(pi.est,pi.true)
ex1[[4]]
ex1[[3]][modes+1]
ex1 <- PT_IIT_sim(p,startsim=1, endsim=1,numiter=total_iter,iterswap=2000,temp=c(1,0.15,0.05,0.01),bal_function=c("sq","sq","sq","sq"), bias_fix = TRUE)
pi.est <- ex1[[1]]/sum(ex1[[1]])
TVD(pi.est,pi.true)
ex1[[4]]
##### Running simulations #####
set.seed(123)
total_iter <- 300000
ex1 <- PT_IIT_sim(p,startsim=1, endsim=1,numiter=total_iter,iterswap=2000,temp=c(1,0.2,0.08,0.001),bal_function=c("sq","sq","sq","sq"), bias_fix = TRUE)
pi.est <- ex1[[1]]/sum(ex1[[1]])
TVD(pi.est,pi.true)
ex1[[4]]
ex1[[3]][modes+1]
pi.est[modes+1]
ex1 <- PT_IIT_sim(p,startsim=1, endsim=1,numiter=total_iter,iterswap=2000,temp=c(1,0.2,0.08,0.001),bal_function=c("sq","sq","sq","sq"), bias_fix = TRUE)
ex2 <- PT_IIT_sim(p,startsim=1, endsim=1,numiter=total_iter,iterswap=2000,temp=c(1,0.2,0.08,0.001),bal_function=c("sq","sq","sq","sq"), bias_fix = FALSE)
ex3 <- PT_IIT_sim(p,startsim=1, endsim=1,numiter=total_iter,iterswap=1000000,temp=c(1),bal_function=c("sq"), bias_fix = TRUE)
pi.est <- ex1[[1]]/sum(ex1[[1]])
TVD(pi.est,pi.true)
ex1[[4]]
ex1[[3]][modes+1]
pi.est[modes+1]
pi.est <- ex2[[1]]/sum(ex2[[1]])
TVD(pi.est,pi.true)
ex2[[4]]
ex2[[3]][modes+1]
pi.est[modes+1]
pi.est <- ex3[[1]]/sum(ex3[[1]])
TVD(pi.est,pi.true)
ex3[[3]][modes+1]
pi.est[modes+1]
##### Running simulations #####
set.seed(123)
total_iter <- 300000
ex1 <- PT_IIT_sim(p,startsim=1, endsim=1,numiter=total_iter,iterswap=2000,temp=c(1,0.1,0.05,0.001),bal_function=c("sq","sq","sq","sq"), bias_fix = TRUE)
ex2 <- PT_IIT_sim(p,startsim=1, endsim=1,numiter=total_iter,iterswap=2000,temp=c(1,0.1,0.05,0.001),bal_function=c("sq","sq","sq","sq"), bias_fix = FALSE)
ex3 <- PT_IIT_sim(p,startsim=1, endsim=1,numiter=total_iter,iterswap=1000000,temp=c(1),bal_function=c("sq"), bias_fix = TRUE)
pi.est <- ex1[[1]]/sum(ex1[[1]])
TVD(pi.est,pi.true)
ex1[[4]]
ex1[[3]][modes+1]
pi.est <- ex1[[1]]/sum(ex1[[1]])
TVD(pi.est,pi.true)
ex1[[4]]
##### Running simulations #####
set.seed(123)
total_iter <- 300000
ex1 <- PT_IIT_sim(p,startsim=1, endsim=1,numiter=total_iter,iterswap=2000,temp=c(1,0.1,0.05,0.001),bal_function=c("sq","sq","sq","sq"), bias_fix = TRUE)
pi.est <- ex1[[1]]/sum(ex1[[1]])
TVD(pi.est,pi.true)
ex1[[4]]
ex1[[3]][modes+1]
pi.est[modes+1]
##### Running simulations #####
set.seed(123)
total_iter <- 300000
ex1 <- PT_IIT_sim(p,startsim=1, endsim=1,numiter=total_iter,iterswap=2000,temp=c(1,0.15,0.05,0.001),bal_function=c("sq","sq","sq","sq"), bias_fix = TRUE)
pi.est <- ex1[[1]]/sum(ex1[[1]])
TVD(pi.est,pi.true)
ex1[[4]]
ex1[[3]][modes+1]
pi.est[modes+1]
##### Running simulations #####
set.seed(123)
total_iter <- 300000
ex1 <- PT_IIT_sim(p,startsim=1, endsim=1,numiter=total_iter,iterswap=2000,temp=c(1,0.15,0.05),bal_function=c("sq","sq","sq","sq"), bias_fix = TRUE)
pi.est <- ex1[[1]]/sum(ex1[[1]])
TVD(pi.est,pi.true)
ex1[[4]]
ex1[[3]][modes+1]
pi.est[modes+1]
total_iter <- 500000
ex1 <- PT_IIT_sim(p,startsim=1, endsim=1,numiter=total_iter,iterswap=2000,temp=c(1,0.15,0.05),bal_function=c("sq","sq","sq","sq"), bias_fix = TRUE)
pi.est <- ex1[[1]]/sum(ex1[[1]])
TVD(pi.est,pi.true)
ex1[[4]]
ex1[[3]][modes+1]
pi.est[modes+1]
total_iter <- 300000
iterswap <- 2000
temperatures <- c(1,0.2,0.05)
bel_f <- c("sq","sq","sq","sq")
set.seed(153)
ex1 <- PT_IIT_sim(p,startsim=1, endsim=1,numiter=total_iter,iterswap,temperatures,bal_f, bias_fix = TRUE)
bal_f <- c("sq","sq","sq","sq")
set.seed(153)
ex1 <- PT_IIT_sim(p,startsim=1, endsim=1,numiter=total_iter,iterswap,temperatures,bal_f, bias_fix = TRUE)
pi.est <- ex1[[1]]/sum(ex1[[1]])
TVD(pi.est,pi.true)
ex1[[4]]
ex1[[3]][modes+1]
pi.est[modes+1]
ex1 <- PT_IIT_sim(p,startsim=1, endsim=1,numiter=total_iter,iterswap,temperatures,bal_f, bias_fix = TRUE)
pi.est <- ex1[[1]]/sum(ex1[[1]])
TVD(pi.est,pi.true)
ex1[[4]]
TVD(pi.est,pi.true)
ex1[[4]]
ex1[[3]][modes+1]
pi.est[modes+1]
total_iter <- 300000
iterswap <- 2000
temperatures <- c(1,0.15,0.05,.001)
bal_f <- c("sq","sq","sq","sq")
set.seed(153)
ex1 <- PT_IIT_sim(p,startsim=1, endsim=1,numiter=total_iter,iterswap,temperatures,bal_f, bias_fix = TRUE)
pi.est <- ex1[[1]]/sum(ex1[[1]])
TVD(pi.est,pi.true)
ex1[[4]]
ex1[[3]][modes+1]
pi.est[modes+1]
total_iter <- 300000
iterswap <- 2000
temperatures <- c(1,0.18,0.05,.001)
bal_f <- c("sq","sq","sq","sq")
set.seed(153)
ex1 <- PT_IIT_sim(p,startsim=1, endsim=1,numiter=total_iter,iterswap,temperatures,bal_f, bias_fix = TRUE)
pi.est <- ex1[[1]]/sum(ex1[[1]])
TVD(pi.est,pi.true)
ex1[[4]]
total_iter <- 300000
iterswap <- 2000
temperatures <- c(1,0.18,0.09,.001)
bal_f <- c("sq","sq","sq","sq")
set.seed(153)
ex1 <- PT_IIT_sim(p,startsim=1, endsim=1,numiter=total_iter,iterswap,temperatures,bal_f, bias_fix = TRUE)
pi.est <- ex1[[1]]/sum(ex1[[1]])
TVD(pi.est,pi.true)
ex1[[4]]
ex1[[3]][modes+1]
pi.est[modes+1]
ex2 <- PT_IIT_sim(p,startsim=1, endsim=1,numiter=total_iter,iterswap,temperatures,bal_f, bias_fix = FALSE)
pi.est <- ex2[[1]]/sum(ex2[[1]])
TVD(pi.est,pi.true)
ex2[[4]]
ex2[[3]][modes+1]
pi.est[modes+1]
ex3 <- PT_IIT_sim(p,startsim=1, endsim=1,numiter=total_iter,iterswap=1000000,temp=c(1),bal_function=c("sq"), bias_fix = TRUE)
pi.est <- ex3[[1]]/sum(ex3[[1]])
TVD(pi.est,pi.true)
ex3[[3]][modes+1]
pi.est[modes+1]
#if(!require('Rcpp')){install.packages('Rcpp')}
library(Rcpp)
library(RcppArmadillo)
# setwd('..')
Rcpp::sourceCpp("functions/testing_cpp_functions.cpp")
sum_cube()
# setwd('..')
Rcpp::sourceCpp("functions/testing_cpp_functions.cpp")
sum_cube()
0.4625069+0.7388764
0.5970306+0.9995826
300/2000
300/20
library(Rcpp)
library(RcppArmadillo)
Rcpp::sourceCpp("functions/cpp_functions.cpp")
sample_inter_swap <- 2000
total_swap <- total_iter/iterswap
temperatures <- c(1,0.18,0.09,.001)
bal_f <- c("sq","sq","sq","sq")
set.seed(153)
ex1 <- PT_a_IIT_sim(p,startsim=1, endsim=1,total_swap,sample_inter_swap,temperatures,bal_f)
total_swap
total_iter <- 300000
iterswap <- 2000
total_swap <- total_iter/iterswap
total_swap
ex1[[1]]
p <- 16 #dimension
theta <- 15
# Modes definition
mod1 <- rep(1,p)
mod2 <- c(1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0)
mod3 <- c(0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1)
mod4 <- c(1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0)
mod5 <- c(0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1)
mod6 <- c(1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1)
mod7 <- c(0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0)
modes <- c(vec_to_num(mod1),  vec_to_num(mod2),  vec_to_num(mod3),  vec_to_num(mod4),  vec_to_num(mod5),  vec_to_num(mod6),  vec_to_num(mod7))
modes_list <- list(mod1,mod2,mod3,mod4,mod5,mod6,mod7)
ll_comp <- function(X, theta=1){
if(length(X)!=p){print('Error in dimension');return(-1);}
total=0;
for(m in 1:length(modes_list)){# loop for modes
total = total+exp(-theta*sum(abs(X-modes_list[[m]])))
}
return(log(total));
}
pi.true <- rep(0,2^p)
for(i in 0:(2^p -1)){
pi.true[i+1] <-  ll_comp(NumberToVector(i,p),theta)
}
#True probability
pi.true <- exp(pi.true)/(length(modes_list)*(1+exp(-theta))^p)
pi.true[modes+1]
sum(pi.true[modes+1])
pi.est <- ex1[[1]]/sum(ex1[[1]])
TVD(pi.est,pi.true)
ex1[[3]][modes+1]
ex1[[3]]
ex1[[4]]
ex1[[5]]
ex1[[3]][modes+1]
Rcpp::sourceCpp("functions/cpp_functions.cpp")
sample_inter_swap <- 3000
total_swap <- 200
temperatures <- c(1,0.18,0.09,.001)
bal_f <- c("sq","sq","sq","sq")
set.seed(153)
ex1 <- PT_a_IIT_sim(p,startsim=1, endsim=2,total_swap,sample_inter_swap,temperatures,bal_f)
###### unbounded balancing functions ######
x <- seq(0,4,by=0.1)
data_u <- tibble(r=x,
min=sapply(x,min,1),
sq=sqrt(x),
max=sapply(x,max,1))
library(tidyverse)
library(latex2exp)
library(here)
x <- seq(0,4,by=0.1)
data_u <- tibble(r=x,
min=sapply(x,min,1),
sq=sqrt(x),
max=sapply(x,max,1))
(plot1 <- data_u |> pivot_longer(-r,names_to = "b.fun",values_to = 'h(r)') |>
ggplot(aes(x=r,y=`h(r)`,color = `b.fun`))+
geom_line(size=1)+
geom_segment(aes(x=2,y=0,xend=2,yend=2),color = "blue", linetype = "dashed", size = 1)+
geom_segment(aes(x=3,y=0,xend=3,yend=3),color = "red", linetype = "dashed", size = 1)+
annotate("text", x=2.1, y=0, label= TeX("$y_1$"),size=6, color='blue')+
annotate("text", x=3.1, y=0, label= TeX("$y_2$"),size=6, color='red')+
theme(axis.text=element_text(size=15),axis.title=element_text(size=14))+
theme_minimal())
bf <- function(x,f,bb){
boundf <- min(f(x),bb)/bb
boundf_1 <- min(f(1/x),bb)/bb
return(min(boundf,x*boundf_1))
}
bf_nobb <- function(x,f,bb){
boundf <- min(f(x),bb)
boundf_1 <- min(f(1/x),bb)
return(min(boundf,x*boundf_1))
}
###### unbounded balancing functions ######
x <- seq(0,4,by=0.1)
data_u <- tibble(r=x,
min=sapply(x,min,1),
sq=sqrt(x),
max=sapply(x,max,1))
(plot1 <- data_u |> pivot_longer(-r,names_to = "b.fun",values_to = 'h(r)') |>
ggplot(aes(x=r,y=`h(r)`,color = `b.fun`))+
geom_line(size=1)+
geom_segment(aes(x=2,y=0,xend=2,yend=2),color = "blue", linetype = "dashed", size = 1)+
geom_segment(aes(x=3,y=0,xend=3,yend=3),color = "red", linetype = "dashed", size = 1)+
annotate("text", x=2.1, y=0, label= TeX("$y_1$"),size=6, color='blue')+
annotate("text", x=3.1, y=0, label= TeX("$y_2$"),size=6, color='red')+
theme(axis.text=element_text(size=15),axis.title=element_text(size=14))+
theme_minimal())
###### Bounded balancing functions ######
bf <- function(x,f,bb){
boundf <- min(f(x),bb)/bb
boundf_1 <- min(f(1/x),bb)/bb
return(min(boundf,x*boundf_1))
}
bf_nobb <- function(x,f,bb){
boundf <- min(f(x),bb)
boundf_1 <- min(f(1/x),bb)
return(min(boundf,x*boundf_1))
}
# for(i in seq(0,15,by=0.1)){
x <- seq(0.1,20,by=0.1)
#### Random balancing functions
data_u <- tibble(r=x,
f1=sapply(x,bf,f=sqrt,bb=4),
f2=sapply(x,bf,f=sqrt,bb=2),
f3=sapply(x,bf,f=function(x){x^(2)},bb=2),
f4=sapply(x,bf,f=function(x){x^(1/4)},bb=2),
f5=sapply(x/16,min,1),
f6=sapply(x/5,min,1))
data_u |> pivot_longer(-r,names_to = "b.fun",values_to = 'h(r)') |>
ggplot(aes(x=r,y=`h(r)`,color = `b.fun`))+
geom_line(size=1)
data_u <- tibble(r=x,
`1`=sapply(x,bf,f=sqrt,bb=1),
`2`=sapply(x,bf,f=sqrt,bb=2),
`3`=sapply(x,bf,f=sqrt,bb=3),
`4`=sapply(x,bf,f=sqrt,bb=4),
`5`=sapply(x,bf,f=sqrt,bb=5),
`6`=sapply(x,bf,f=sqrt,bb=6))
data_u |> pivot_longer(-r,names_to = 'b.fun',values_to = 'h(r)') |>
ggplot(aes(x=r,y=`h(r)`,color = `b.fun`))+
geom_line(size=1)+
labs(col=TeX("$\\gamma$"),
y=TeX("$h_{\\gamma}(r)$"),
x=TeX("$r$"),
title=TeX("$\\sqrt{r}$ with different bounds"))
#if(!require('Rcpp')){install.packages('Rcpp')}
library(Rcpp)
library(RcppArmadillo)
# setwd('..')
Rcpp::sourceCpp("functions/testing_cpp_functions.cpp")
# setwd('..')
Rcpp::sourceCpp("functions/testing_cpp_functions.cpp")
neigh <- matrix(1:6,nrow=2)
neigh
neigh <- matrix(1:6,nrow=2)
set.seed(123)
sample_prop(neigh)
log(0.2876)
log(-log(0.2876))
log(-log(0.9405))
-0.1119-log(3)
# setwd('..')
Rcpp::sourceCpp("functions/testing_cpp_functions.cpp")
# setwd('..')
Rcpp::sourceCpp("functions/testing_cpp_functions.cpp")
neigh <- matrix(1:6,nrow=2)
set.seed(123)
sample_prop(neigh)
neigh
set.seed(123)
sample_prop(neigh)
sample_prop(neigh)
sample_prop(neigh)
sample_prop(neigh)
sample_prop(neigh)
sample_prop(neigh)
sample_prop(neigh)
sample_prop(neigh)
sample_prop(neigh)
neigh
neigh <- matrix(c(1:5,60),nrow=2)
set.seed(123)
sample_prop(neigh)
sample_prop(neigh)
sample_prop(neigh)
sample_prop(neigh)
sample_prop(neigh)
neigh
sample_prop(neigh)
sample_prop(neigh)
sample_prop(neigh)
sample_prop(neigh)
sample_prop(neigh)
sample_prop(neigh)
sample_prop(neigh)
sample_prop(neigh)
sample_prop(neigh)
sample_prop(neigh)
sample_prop(neigh)
sample_prop(neigh)
sample_prop(neigh)
neigh
# setwd('..')
Rcpp::sourceCpp("functions/testing_cpp_functions.cpp")
neigh <- matrix(c(1:5,30),nrow=2)
set.seed(123)
sample_prop(neigh)
sample_prop(neigh)
sample_prop(neigh)
sample_prop(neigh)
sample_prop(neigh)
sample_prop(neigh)
sample_prop(neigh)
sample_prop(neigh)
sample_prop(neigh)
# setwd('..')
Rcpp::sourceCpp("functions/testing_cpp_functions.cpp")
entires_vec(1,c(1,2,3,4,5,6))
# setwd('..')
Rcpp::sourceCpp("functions/testing_cpp_functions.cpp")
entires_vec(1,c(1,2,3,4,5,6))
entries_vec(1,c(1,2,3,4,5,6))
# setwd('..')
Rcpp::sourceCpp("functions/testing_cpp_functions.cpp")
entries_vec(2,c(1,2,3,4,5,6))
entries_vec(3,c(1,2,3,4,5,6))
entries_vec(1,c(1,2,3,4,5,6))
entries_vec(0,c(1,2,3,4,5,6))
entries_vec(6,c(1,2,3,4,5,6))
# setwd('..')
Rcpp::sourceCpp("functions/testing_cpp_functions.cpp")
entries_vec(0,c(1,2,3,4,5,6))
entries_vec(5,c(1,2,3,4,5,6))
