tvd <-  tvd |> filter(!is.na(alg))
mode_visit <- mode_visit |> filter(!is.na(alg))
pi_modes <- pi_modes|> filter(!is.na(alg))
##### Compare estimation of modes #####
# pi_modes |> pivot_longer(cols = -(alg:sim), names_to = "mode", values_to = "pi_est") |>
#   ggplot(aes(x=alg,y=pi_est,fill=alg))+
#   geom_boxplot(show.legend = FALSE)+
#   facet_wrap(~mode)
pi_modes |> pivot_longer(cols = -(alg:sim), names_to = "mode", values_to = "pi_est") |>
ggplot(aes(x=mode,y=pi_est,fill=alg))+
geom_boxplot(show.legend = FALSE)+
geom_hline(yintercept = pi.true[modes[1]+1], color = "red", linetype = "dashed", size = 1)+
facet_wrap(~alg)+
theme_minimal(base_size = 17)+
theme(legend.key.size = unit(1, 'cm'))
pi_modes |> rowwise() |>
mutate(tvd=0.5*sum(abs(pi.true[modes[1]+1]-c_across(`1`:`7`)))) |>
ungroup() |>
select(alg,tvd) |>
ggplot(aes(x=alg,y=tvd,fill=alg)) +
geom_boxplot(show.legend = FALSE)+
labs(fill='Algortihm',x="",y="Total Variation Distance")+
theme_minimal(base_size = 17)+
theme(legend.key.size = unit(1, 'cm'))
##### Total Variation Distance #####
tvd_plot <- tvd |>  filter(!str_starts(alg,'IIT')) |>
ggplot(aes(x=alg,y=tvd,fill=alg)) +
geom_boxplot(show.legend = FALSE)+
labs(fill='Algortihm',x="",y="Total Variation Distance")+
theme_minimal(base_size = 17)+
theme(legend.key.size = unit(1, 'cm'))
tvd_plot
jpeg(file.path(export_path,paste0("tvd_",export_file_name,".jpg")),width=800,height =400,pointsize = 30)
tvd_plot
dev.off()
##### First visit to modes #####
col_names <- c("1","2","3","4","5","6","7")
mode_sum <- mode_visit |>
rowwise()|>
mutate(last_visit=max(c_across(all_of(col_names))), first_visit=min(c_across(all_of(col_names))[c_across(all_of(col_names))>0])) |>
mutate(first_mode =  names(pick(all_of(col_names)))[which(c_across(all_of(col_names)) == first_visit)[1]]) |>
mutate(last_mode =  names(pick(all_of(col_names)))[which(c_across(all_of(col_names)) == last_visit)[1]]) |>
mutate(total_modes = sum(c_across(all_of(col_names)) > 0)) |>
select(-all_of(col_names))
##### Report on number of modes visited by each algorithm
table_visited <- mode_sum |> rename(algorithm=alg) |>
group_by(algorithm,total_modes) |>
summarise(count=n()) |> ungroup() |> arrange(total_modes,desc(algorithm)) |>
pivot_wider(id_cols =algorithm,
names_from = total_modes,
values_from = count,
values_fill=0)
jpeg(file.path(export_path,paste0("table_visited_modes_",export_file_name,".jpg")),width=50*nrow(table_visited),height=40*nrow(table_visited),pointsize = 30)
grid.arrange(tableGrob(table_visited))
dev.off()
##### Report on number of iterations for the original replica to visit all modes (most of the times after a swap)
iterations_to_explore <- mode_sum |> filter(!str_starts(alg,'IIT')) |>
group_by(alg) |>
summarise(min=min(last_visit),
q1=quantile(last_visit,probs=0.25),
median=quantile(last_visit,probs=0.5),
mean=mean(last_visit),
q3=quantile(last_visit,probs=0.75),
max=max(last_visit))
jpeg(file.path(export_path,paste0("table_iterations_",export_file_name,".jpg")),width=150*nrow(iterations_to_explore),height=40*nrow(iterations_to_explore),pointsize = 30)
grid.arrange(tableGrob(iterations_to_explore))
dev.off()
##### Report on number of replica swaps needed to visit all modes
# First algorithms do 2k iterations before trying a replica swap
swaps_to_explore <- mode_sum |> filter(!str_starts(alg,'IIT'),!str_starts(alg,'PT A-IIT m')) |>
mutate(last_visit=last_visit/interswap) |>
group_by(alg) |>
summarise(min=min(last_visit),
q1=quantile(last_visit,probs=0.25),
median=quantile(last_visit,probs=0.5),
mean=mean(last_visit),
q3=quantile(last_visit,probs=0.75),
max=max(last_visit))
temp <- mode_sum |> filter(str_starts(alg,'PT A-IIT m')) |>
select(alg,sim,last_visit) |>
left_join(iterations,by=c("alg","sim")) |>
mutate(last_visit=last_visit/`1`) |>
select(alg,last_visit) |>
group_by(alg) |>
summarise(min=round(min(last_visit),2),
q1=round(quantile(last_visit,probs=0.25),2),
median=round(quantile(last_visit,probs=0.5),2),
mean=round(mean(last_visit),2),
q3=round(quantile(last_visit,probs=0.75),2),
max=round(max(last_visit),2))
swaps_to_explore <- rbind(swaps_to_explore,temp)
jpeg(file.path(export_path,paste0("table_swaps_",export_file_name,".jpg")),width=140*nrow(swaps_to_explore),height=40*nrow(swaps_to_explore),pointsize = 30)
grid.arrange(tableGrob(swaps_to_explore))
dev.off()
##### Report on average swap rate
swap_report <- swap_rate |>
group_by(alg) |>
summarise(`1↔2`=mean(`1`),`2↔3`=mean(`2`),`3↔4`=mean(`3`))
jpeg(file.path(export_path,paste0("table_swap_rate_",export_file_name,".jpg")),width=140*nrow(swap_report),height=40*nrow(swap_report),pointsize = 30)
grid.arrange(tableGrob(swap_report))
dev.off()
##### Report on average swap rate
rt_report <- round_trip |>
group_by(alg) |>
summarise(`R1`=mean(`1`),`R2`=mean(`2`),`R3`=mean(`3`),,`R4`=mean(`4`))
jpeg(file.path(export_path,paste0("table_roundtrip_rate_",export_file_name,".jpg")),width=140*nrow(rt_report),height=40*nrow(rt_report),pointsize = 30)
grid.arrange(tableGrob(rt_report))
dev.off()
}# Finish low dim reports
#Starts high dim reports
if(chosen_dim=="highdim"){
##### Delete first row with NA#####
max_lik <- max_lik|> filter(!is.na(alg))
loglik_visited <- loglik_visited |> filter(!is.na(alg))
iter_visit <- iter_visit|> filter(!is.na(alg))
##### Report on average swap rate
swap_report <- swap_rate |>
group_by(alg) |>
summarise(`1↔2`=mean(`1`),`2↔3`=mean(`2`))
jpeg(file.path(export_path,paste0("table_swap_rate_",export_file_name,".jpg")),width=140*nrow(swap_report),height=40*nrow(swap_report),pointsize = 30)
grid.arrange(tableGrob(swap_report))
dev.off()
##### Report on average swap rate
rt_report <- round_trip |>
group_by(alg) |>
summarise(`R1`=mean(`1`),`R2`=mean(`2`),`R3`=mean(`3`),)
jpeg(file.path(export_path,paste0("table_roundtrip_rate_",export_file_name,".jpg")),width=140*nrow(rt_report),height=40*nrow(rt_report),pointsize = 30)
grid.arrange(tableGrob(rt_report))
dev.off()
}
chosen_ids <-9#c(28,29,30,31,32,33)#c(31,32)#c(29,30)#c(25,26,27)#c(17,18,19,20)#c(25,26,27)#c(9,10,11,12)   #c(20,21,22) # c(13,14,15,16)
#List of files
parameters <- read_csv(paste0("results/simulation_details_",file_dim,".csv"))
#Create table with available files
data_sum <- tibble(file_names=list.files(path = "results", pattern = "^sim_.*\\.Rds")) |>
mutate(id=as.numeric(str_extract(file_names, "(?<=id_)[0-9]+(?=\\.Rds)")),
dim=str_extract(file_names, "(?<=sim_)[^_]+(?=_id)")) |>
filter(dim==chosen_dim) |>
left_join(parameters, by="id")
# filter IDs to compare
data_sum <- data_sum |> filter(id %in% chosen_ids)
data <- readRDS(file.path("results",data_sum[i,1]))
# filter IDs to compare
data_sum <- data_sum |> filter(id %in% chosen_ids)
data <- readRDS(file.path("results",data_sum[i,1]))
data_sum
file.path("results",data_sum[i,1])
i <- 1
data <- readRDS(file.path("results",data_sum[i,1]))
names(data)
chosen_ids <- 25
#List of files
parameters <- read_csv(paste0("results/simulation_details_",file_dim,".csv"))
#Create table with available files
data_sum <- tibble(file_names=list.files(path = "results", pattern = "^sim_.*\\.Rds")) |>
mutate(id=as.numeric(str_extract(file_names, "(?<=id_)[0-9]+(?=\\.Rds)")),
dim=str_extract(file_names, "(?<=sim_)[^_]+(?=_id)")) |>
filter(dim==chosen_dim) |>
left_join(parameters, by="id")
# filter IDs to compare
data_sum <- data_sum |> filter(id %in% chosen_ids)
data <- readRDS(file.path("results",data_sum[i,1]))
names(data)
ip <- data$ip
data_sum
total_sim <- 100
total_swaps <- 750000/2500
dim(ip)
ip <- as.data.frame(ip)
if(nrow(ip)!=(total_sim*total_swaps+1)){print("Error with size of input")}
max_temp <- max(ip[1,])#Get max temp
ip[1,]
min_temp <- min(ip[1,])#Get min temp
initial_ip <- ip[1,]#Get the initial state of the index process
ip <- ip |> slice(-1)
ip$sim <- rep(1:total_sim,each=total_swaps) #Add a column labeling each row with the simulation it corresponds
ip <- ip |> select(sim,everything())# Re-order columns so simulation number is first column
head(ip)
table(ip$sim)
c <- 2
initial_ip
first_last <- (initial_ip[c-1]==max_temp)*max_temp + (initial_ip[c-1]==min_temp)*min_temp
first_last
ip[1,]
floor(c(5.2,3.4,6.9))
PT_RT(ip,total_swaps,total_sim)
dim(ip)
total_swaps
total_sim
head(ip)
names(data)
ip <- data$ip
head(ip)
PT_RT(ip,total_swaps,total_sim)
PT_RT <- function(ip,total_swaps, total_sim){
ip <- as.data.frame(ip)
if(nrow(ip)!=(total_sim*total_swaps+1)){print("Error with size of input")}
max_temp <- max(ip[1,])#Get max temp
min_temp <- min(ip[1,])#Get min temp
initial_ip <- ip[1,]#Get the initial state of the index process
ip <- ip |> slice(-1)
ip$sim <- rep(1:total_sim,each=total_swaps) #Add a column labeling each row with the simulation it corresponds
ip <- ip |> select(sim,everything())# Re-order columns so simulation number is first column
#The round trip starts with temperature 0
rt_count <- matrix(0,nrow = total_sim,ncol=ncol(ip)-1) # to track round trip rate
for (c in 2:ncol(ip)){#Loop for each replica, ignoring first column that contains the number of simulation
first_last <- (initial_ip[c-1]==max_temp)*max_temp + (initial_ip[c-1]==min_temp)*min_temp
for(i in 1:nrow(ip)){#Loop for each iteration
if(i==1){# Restart the index process for each replica
last <- first_last
start_rt <- FALSE
}else if(ip[i,1]!=ip[i-1,1]){#If we changed the number of simulation
last <- first_last
start_rt <- FALSE
}
current <- ip[i,c]#Current iteration
if(current==min_temp & start_rt==FALSE){#Round trip starts in the MIN temperature
# print(paste0("Start round trip for simulation ",ip[i,1]," at iteration ", i));
start_rt <- TRUE;
last <- current;
# if(current!=last){rt_count[ip[i,1],c-1]=rt_count[ip[i,1],c-1]-0.5;}
next;
}#We start counting RT from the max temp
if(start_rt){
if(current==min_temp|current==max_temp){ #If it's one of the extreme temperatures
#This is to count half round trips
if(last!=current){# Se completo medio round trip
# print(paste0("simulation ",ip[i,1]," iteration ",i," updating ",last," to ",current));
rt_count[ip[i,1],c-1]=rt_count[ip[i,1],c-1]+0.5;#añadir medio round trip
last <- current;#actualizar el current
}
}
}
}
}
# Code to test
# ip |> filter(V2==min_temp|V2==max_temp) |> select(sim,V2) |> filter(sim==3)
# ip |> filter(V4==1|V4==4) |> select(sim,V4) |> filter(sim==1)
# ip |> filter(V1==1|V1==4) |> select(sim,V1) |> filter(sim==1)
# ip |> filter(V3==1|V3==4) |> select(sim,V3) |> filter(sim==1)
# ip |> filter(V3==1|V3==4) |> select(sim,V3) |> filter(sim==9)
# ip |> filter(V1==1|V1==4) |> select(sim,V1) |> filter(sim==9)
# ip|> filter(sim==9) |> pull(V1)
# ip |> filter(sim==9) |> pull(V3)
# #Count half round trips
#   return(rt_count);
#Count only full roundtrips
return(floor(rt_count))
}
PT_RT(ip,total_swaps,total_sim)
PT_RT <- function(ip,total_swaps, total_sim){
ip <- as.data.frame(ip)
if(nrow(ip)!=(total_sim*total_swaps+1)){print("Error with size of input")}
max_temp <- max(ip[1,])#Get max temp
min_temp <- min(ip[1,])#Get min temp
initial_ip <- ip[1,]#Get the initial state of the index process
ip <- ip |> slice(-1)
ip$sim <- rep(1:total_sim,each=total_swaps) #Add a column labeling each row with the simulation it corresponds
ip <- ip |> select(sim,everything())# Re-order columns so simulation number is first column
#The round trip starts with temperature 0
rt_count <- matrix(0,nrow = total_sim,ncol=ncol(ip)-1) # to track round trip rate
for (c in 2:ncol(ip)){#Loop for each replica, ignoring first column that contains the number of simulation
first_last <- (initial_ip[c-1]==max_temp)*max_temp + (initial_ip[c-1]==min_temp)*min_temp
for(i in 1:nrow(ip)){#Loop for each iteration
if(i==1){# Restart the index process for each replica
last <- first_last
start_rt <- FALSE
}else if(ip[i,1]!=ip[i-1,1]){#If we changed the number of simulation
last <- first_last
start_rt <- FALSE
}
current <- ip[i,c]#Current iteration
if(current==min_temp & start_rt==FALSE){#Round trip starts in the MIN temperature
# print(paste0("Start round trip for simulation ",ip[i,1]," at iteration ", i));
start_rt <- TRUE;
last <- current;
# if(current!=last){rt_count[ip[i,1],c-1]=rt_count[ip[i,1],c-1]-0.5;}
next;
}#We start counting RT from the max temp
if(start_rt){
if(current==min_temp|current==max_temp){ #If it's one of the extreme temperatures
#This is to count half round trips
if(last!=current){# Se completo medio round trip
# print(paste0("simulation ",ip[i,1]," iteration ",i," updating ",last," to ",current));
rt_count[ip[i,1],c-1]=rt_count[ip[i,1],c-1]+0.5;#añadir medio round trip
last <- current;#actualizar el current
}
}
}
}
}
# Code to test
# ip |> filter(V2==min_temp|V2==max_temp) |> select(sim,V2) |> filter(sim==3)
# ip |> filter(V4==1|V4==4) |> select(sim,V4) |> filter(sim==1)
# ip |> filter(V1==1|V1==4) |> select(sim,V1) |> filter(sim==1)
# ip |> filter(V3==1|V3==4) |> select(sim,V3) |> filter(sim==1)
# ip |> filter(V3==1|V3==4) |> select(sim,V3) |> filter(sim==9)
# ip |> filter(V1==1|V1==4) |> select(sim,V1) |> filter(sim==9)
# ip|> filter(sim==9) |> pull(V1)
# ip |> filter(sim==9) |> pull(V3)
# #Count half round trips
return(rt_count);
#Count only full roundtrips
# return(floor(rt_count))
}
check <- PT_RT(ip,total_swaps,total_sim)
head(check)
##### Functions to transform output from PT simulation #####
#Compute roundtrip rate
#Inputs:
### Index process (from Rcpp function)
### Number oof iterations, total simulations and iteration between swaps.
#Output: matrix reporting the number of Round Trips for each simulation
PT_RT <- function(ip,total_swaps, total_sim){
ip <- as.data.frame(ip)
if(nrow(ip)!=(total_sim*total_swaps+1)){print("Error with size of input")}
max_temp <- max(ip[1,])#Get max temp
min_temp <- min(ip[1,])#Get min temp
initial_ip <- ip[1,]#Get the initial state of the index process
ip <- ip |> slice(-1)
ip$sim <- rep(1:total_sim,each=total_swaps) #Add a column labeling each row with the simulation it corresponds
ip <- ip |> select(sim,everything())# Re-order columns so simulation number is first column
#The round trip starts with temperature 0
rt_count <- matrix(0,nrow = total_sim,ncol=ncol(ip)-1) # to track round trip rate
for (c in 2:ncol(ip)){#Loop for each replica, ignoring first column that contains the number of simulation
first_last <- (initial_ip[c-1]==max_temp)*max_temp + (initial_ip[c-1]==min_temp)*min_temp
for(i in 1:nrow(ip)){#Loop for each iteration
if(i==1){# Restart the index process for each replica
last <- first_last
start_rt <- FALSE
}else if(ip[i,1]!=ip[i-1,1]){#If we changed the number of simulation
last <- first_last
start_rt <- FALSE
}
current <- ip[i,c]#Current iteration
if(current==min_temp & start_rt==FALSE){#Round trip starts in the MIN temperature
# print(paste0("Start round trip for simulation ",ip[i,1]," at iteration ", i));
start_rt <- TRUE;
last <- current;
# if(current!=last){rt_count[ip[i,1],c-1]=rt_count[ip[i,1],c-1]-0.5;}
next;
}#We start counting RT from the max temp
if(start_rt){
if(current==min_temp|current==max_temp){ #If it's one of the extreme temperatures
#This is to count half round trips
if(last!=current){# Se completo medio round trip
# print(paste0("simulation ",ip[i,1]," iteration ",i," updating ",last," to ",current));
rt_count[ip[i,1],c-1]=rt_count[ip[i,1],c-1]+0.5;#añadir medio round trip
last <- current;#actualizar el current
}
}
}
}
}
# Code to test
# ip |> filter(V2==min_temp|V2==max_temp) |> select(sim,V2) |> filter(sim==3)
# ip |> filter(V4==1|V4==4) |> select(sim,V4) |> filter(sim==1)
# ip |> filter(V1==1|V1==4) |> select(sim,V1) |> filter(sim==1)
# ip |> filter(V3==1|V3==4) |> select(sim,V3) |> filter(sim==1)
# ip |> filter(V3==1|V3==4) |> select(sim,V3) |> filter(sim==9)
# ip |> filter(V1==1|V1==4) |> select(sim,V1) |> filter(sim==9)
# ip|> filter(sim==9) |> pull(V1)
# ip |> filter(sim==9) |> pull(V3)
# #Count half round trips
# return(rt_count);
#Count only full roundtrips
return(floor(rt_count))
}
check2 <- PT_RT(ip,total_swaps,total_sim)
head(check2)
head(check)
colSums(check2)
colSums(check2)/100
2/3
-1000
exp(-1000)
999+501+499
799-400+1
399-0+1
log(9914)
exp(10)
exp(9.5)
exp(9.7)
exp(9.8)
log(15000)
log(20000)
exp(10)
log(22000)
log(23000)
#### Testing likelihoods of multimodal highdimensional
rm(list=ls())
Rcpp::sourceCpp("functions/cpp_func_multihigh.cpp")
vec1 <- c(rep(0,400),rep(1,400))
vec2 <- c(rep(1,400),rep(0,400))
vec3 <- rep(0:1,400)
vec3
vec1
vec2
eval_loglik("gset/G1.txt",vec1)
eval_loglik("gset/G1.txt",vec2)
eval_loglik("gset/G1.txt",vec3)
exp(9.88257)
exp(9.88257)
exp(9.169727)
run_highd <- function(list_ids){
if(!("./results" %in% list.dirs(recursive=F))){
print("Wrong directory. There's no results folder for the output")
}else{
if(missing(list_ids)){
#### Prompt to choose which simulation to run
writeLines("You can write various IDs separated by commas")
list_ids <- readline('Choose id:')
}
list_ids <- as.numeric(unlist(strsplit(list_ids,",")))
##### Read file for parameters #####
parameters <- as.data.frame(read_csv("results/simulation_details_highd.csv"))
#Start process for algorithms
for(id_chosen in list_ids){
sim_chosen <- parameters |> filter(id==id_chosen)
if(nrow(sim_chosen)!=1){print(paste0("Error: id ",id_chosen," doesn't exist or there's more than one")); next;}
# Parameters for all algorithms
total_simulations <- sim_chosen$simulations
temperatures <- as.numeric(sim_chosen |> select(matches("^t\\d+$")))
bal_f <- as.character(sim_chosen|> select(matches("^bf")))
defined_seed <- sim_chosen$seed
set.seed(defined_seed)
#Parameters for PT with IIT
total_iter <- sim_chosen$iterations #300000 #Total number of steps to perform in each replica
iterswap <- sim_chosen$interswap #Total iterations before trying a replica swap
#Parameters for PT with a-IIT
sample_inter_swap <- sim_chosen$interswap #Number of original samples to get before trying a replica swap
total_swap <- sim_chosen$total_swap #Total number of swaps to try
burnin_iter <- sim_chosen$burn_in #Number of iterations for burn-in
file_matrix <- paste0("gset/",sim_chosen$file,".txt")
p <- readParameters(file_matrix)
states_visited <- sim_chosen$states_visited
# start_state <- sim_chosen$start_state;
alg <- sim_chosen$algorithm
start_state <- as.numeric(unlist(strsplit(sim_chosen$start_state,",")))
export <- list();
#### Function depending on algorithm to use
writeLines(c("Parameters:",paste0("Algorithm: ",alg),
paste0("ID: ",id_chosen),
paste0("Seed: ",defined_seed),
paste0("Total simulations: ",total_simulations),
paste0("Burn-in iterations: ",burnin_iter),
paste0("Temperatures: ",paste(temperatures,collapse=',')),
paste0("Balancing functions: ",paste(bal_f,collapse = ',')),
paste0("Total iterations: ",total_iter),
paste0("Try swaps:",iterswap),
paste0("Samples in-between swaps: ",sample_inter_swap),
paste0("Total swaps:",total_swap),
paste0("File: ",file_matrix),
paste0("States to keep track: ",states_visited)))
# check <- as.numeric(readline('ok? 1 Yes/ 0 No'))
check <- 1;
if(check!=1){print("modify parameters")}else{
if(alg=="IIT"){
# Only IIT
# PT_IIT_sim(int p,int startsim,int endsim, int numiter, int iterswap,int burn_in, vec temp, const std::vector<std::string>& bal_function, bool bias_fix,const std::string& filename,int num_states_visited)
output <- PT_IIT_sim(p,1,total_simulations,total_iter,total_iter+1,burnin_iter,temperatures[1],bal_f[1], TRUE, file_matrix,states_visited,start_state)
}else{
if(alg=="PT_IIT_Z"){
# Using Z factor bias correction
#PT_IIT_sim(int p,int startsim,int endsim, int numiter, int iterswap,int burn_in, vec temp, const std::vector<std::string>& bal_function, bool bias_fix,const std::string& filename,int num_states_visited)
output <- PT_IIT_sim(p,1,total_simulations,total_iter,iterswap,burnin_iter,temperatures,bal_f,TRUE, file_matrix,states_visited,start_state)
#round trip rate (NA for IIT)
export[["round_trips"]] <- PT_RT(output[["ip"]], floor(total_iter/iterswap),total_simulations)
}
if(alg=="PT_IIT_no_Z"){
# output_name <- paste0("PT_IIT_no_Z_","sim_",total_simulations,"_iter_",total_iter,"_iterswap_",iterswap,"_s_",defined_seed,".Rds");
# Without Z factor bias correction
#PT_IIT_sim(int p,int startsim,int endsim, int numiter, int iterswap,int burn_in, vec temp, const std::vector<std::string>& bal_function, bool bias_fix,const std::string& filename,int num_states_visited)
output <- PT_IIT_sim(p,1, total_simulations,total_iter,iterswap,burnin_iter,temperatures,bal_f,FALSE, file_matrix,states_visited,start_state)
#round trip rate (NA for IIT)
export[["round_trips"]] <- PT_RT(output[["ip"]], floor(total_iter/iterswap),total_simulations)
}
if(alg=="PT_A_IIT"){
# Using A-IIT in each replica
#PT_a_IIT_sim(int p,int startsim,int endsim, int total_swaps,int sample_inter_swap,int burn_in, vec temp, const std::vector<std::string>& bal_function,const std::string& filename,int num_states_visited)
output <- PT_a_IIT_sim(p,1,total_simulations,total_swap,sample_inter_swap,burnin_iter,temperatures,bal_f,file_matrix,states_visited,start_state)
#Number of iterations needed between swaps for each replica
export[["total_iter"]] <- output[["total_iter"]]
#round trip rate (NA for IIT)
export[["round_trips"]] <- PT_RT(output[["ip"]],total_swap,total_simulations)
}
if(alg=="PT_A_IIT_RF"){
# Using A-IIT with weights in each replica
#PT_a_IIT_sim_RF(int p,int startsim,int endsim, int numiter,int iterswap,int burn_in, vec temp, const std::vector<std::string>& bal_function, bool bias_fix, int initial_state)
output <- PT_a_IIT_sim_RF(p,1,total_simulations,total_iter,iterswap,burnin_iter,temperatures,bal_f,TRUE,start_state)
#round trip rate (NA for IIT)
export[["round_trips"]] <- PT_RT(output[["ip"]], floor(total_iter/iterswap),total_simulations)
}
# Replica swap acceptance rate (NA for IIT)
export[["swap_rate"]] <- output[["swap_rate"]]
}
# Replica swap acceptance rate (NA for IIT)
export[["swap_rate"]] <- output[["swap_rate"]]
}
export[["states"]] <- output[["states"]]
export[["loglik_visited"]] <- output[["loglik_visited"]]
export[["iter_visit"]]<- output[["iter_visit"]]
export[["time_taken"]] <- output[["time_taken"]]
export[["ip"]] <- output[["ip"]]
output_name <- paste0("sim_highdim_id_",id_chosen,".Rds")
saveRDS(export,file=file.path("results",output_name))
}
}
}
log(9914)
leg(19914)
log(19914)
