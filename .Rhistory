list_of_states <- list()
iter_visit <- as.data.frame(matrix(NA,ncol=max(data_sum$simulations)+2));colnames(iter_visit) <- c("alg","state",1:max(data_sum$simulations))
loglik_visited <- as.data.frame(matrix(NA,ncol=max(data_sum$simulations)+2));colnames(loglik_visited) <- c("alg","state",1:max(data_sum$simulations))
}
time_taken <- as.data.frame(matrix(NA,ncol=2));colnames(time_taken) <- c("alg","time")
full_iter <- list()
k <- 1
Q <- 1
# Start creating datasets with information
for(i in 1:nrow(data_sum)){
data <- readRDS(file.path("results",data_sum[i,1]))
tot_sim <- data_sum |> slice(i)|> pull(simulations)
algorithm <- data_sum |> slice(i) |> pull(algorithm)
if(algorithm=="PT_A_IIT"){algorithm <- "PT A-IIT"}
if(algorithm=="PT_IIT_no_Z"){algorithm <- "PT-IIT no Z"}
if(algorithm=="PT_IIT_Z"){algorithm <- "PT-IIT w Z"}
print(data_sum[i,"algorithm"])
print(names(data))
#Extract time
temp <- as.data.frame(data[["time_taken"]])
temp$alg <- algorithm
temp <- temp |> select(alg,everything())
colnames(temp) <- c("alg","time")
time_taken <- rbind(time_taken,temp)
if(chosen_dim=="lowdim"){
# Extract TVD
temp <- tibble(alg=algorithm,sim=1:tot_sim,tvd=data[["tvd"]])
tvd <- rbind(tvd,temp)
# Extract visit of modes
temp <- as.data.frame(data[["mode_visit"]])
colnames(temp) <- 1:ncol(temp)
temp$sim <- 1:tot_sim
temp$alg <- algorithm
temp$interswap <- data_sum |> slice(i) |> pull(interswap)
temp <- temp |> select(alg,sim,interswap,everything())
mode_visit <- rbind(mode_visit,temp)
#Extract dist. estimation for modes
temp <- data[["est_pi"]]
if(max(colSums(temp))>1){  #check if distribution estimate is not normalized
temp <- t(temp)/colSums(temp)
}
temp <- as.data.frame(temp[,modes+1])
colnames(temp) <- 1:ncol(temp)
temp$sim <- 1:tot_sim
temp$alg <- algorithm
temp <- temp |> select(alg,sim,everything())
pi_modes <- rbind(pi_modes,temp)
}
if(chosen_dim=="highdim"){
#Storing number of iterations to visit modes
temp <- as.data.frame(data[["iter_visit"]])
colnames(temp) <- 1:ncol(temp)
temp$state <- 1:nrow(temp)
temp$alg <- algorithm
temp <- temp |> select(alg,state,everything())
iter_visit <- rbind(iter_visit,temp)
#Storing likelihood of visited states
temp <- as.data.frame(data[["loglik_visited"]])
colnames(temp) <- 1:ncol(temp)
temp$state <- 1:nrow(temp)
temp$alg <- algorithm
temp <- temp |> select(alg,state,everything())
loglik_visited <- rbind(loglik_visited,temp)
#Storing full list of states
list_of_states[[Q]] <- data[["states"]]
Q <- Q+1
}
if(algorithm!='IIT'){
#Extract number of round trips rate
temp <- as.data.frame(data[["round_trips"]])
colnames(temp) <- 1:ncol(temp)
temp$sim <- 1:tot_sim
temp$alg <- algorithm
temp <- temp |> select(alg,sim,everything())
round_trip <- rbind(round_trip,temp)
# Extract replica swap rate
temp <- as.data.frame(data[["swap_rate"]])
colnames(temp) <- 1:ncol(temp)
temp$sim <- 1:tot_sim
temp$alg <- algorithm
temp <- temp |> select(alg,sim,everything())
swap_rate <- rbind(swap_rate,temp)
}
if(algorithm=="PT A-IIT"){
# Extract total iterations
dims<- dim(data[["total_iter"]])
full_iter[[k]] <- data[["total_iter"]]
k <- k+1;
temp <- as.data.frame(t(colSums(data[["total_iter"]])))/dims[1]
#temp is the average number of Rejection Free steps before trying a swap
colnames(temp) <- 1:ncol(temp)
temp$sim <- 1:tot_sim
temp$alg <- algorithm
temp <- temp |> select(alg,sim,everything())
iterations <- rbind(iterations,temp)
}
}
##### Delete first row with NA#####
round_trip <- round_trip |> filter(!is.na(alg))
swap_rate <- swap_rate |> filter(!is.na(alg))
iterations <- iterations |> filter(!is.na(alg))
time_taken <- time_taken |> filter(!is.na(alg))
names(data)
dim(data_states)
dim(data$states)
data$states[,1,1]
sum(data$states[,1,1])
eval_lik("gset/G1.txt",data$states[,1,1])
dim(data$loglik_visited)
data$loglik_visited[1,1]
exp(data$loglik_visited[1,1])
exp(data$loglik_visited[1,1])*10000000
exp(data$loglik_visited[1,1])*1000
max(data$loglik_visited)
exp(max(data$loglik_visited))
rm(list=ls())
source("functions/r_functions.R")
Rcpp::sourceCpp("functions/cpp_functions.cpp")
temperature <- c(1,0.18,0.09,.001)
bal_f <- c("sq","sq","sq","sq")
p <- 16
#PT_a_IIT_sim(int p,int startsim,int endsim, int total_swaps,int sample_inter_swap,int burn_in, vec temp, const std::vector<std::string>& bal_function, int initial_state)
check4 <- PT_a_IIT_sim_RF(p,1,2,10000,1000,5000,temperature,bal_f,TRUE,20)
names(check4)
check4$est_pi
names(check4)
check4$visits
check4$visits[check4$visits>0]
names(check)
names(check4)
check4$swap_rate
rm(list=ls())
source("functions/r_functions.R")
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
id_chosen <- 4
p <- 800
temperature <- c(1,0.18,0.09)
bal_f <- c("sq","sq","sq")
total_simulations <- 50
total_swap <- 200
set.seed(123)
id_chosen <- 4
p <- 800
temperature <- c(1,0.18,0.09)
bal_f <- c("sq","sq","sq")
total_simulations <- 50
total_swap <- 200
set.seed(123)
output <- PT_a_IIT_sim_RF(p,startsim=1, numiter=100,iterswap=25,burn_in=100,temperatures,bal_f,"gset/G1.txt",20)
output <- PT_a_IIT_sim_RF(p,startsim=1, numiter=100,iterswap=25,burn_in=100,temperature,bal_f,"gset/G1.txt",20)
output <- PT_a_IIT_sim_RF(p,startsim=1, numiter=100,iterswap=25,burn_in=100,temperature,bal_f,TRUE,"gset/G1.txt",20)
output <- PT_a_IIT_sim_RF(p,startsim=1, endsim=2,numiter=100,iterswap=25,burn_in=100,temperature,bal_f,TRUE,"gset/G1.txt",20)
names(output)
output$ip
output$swap_rate
output$loglik_visited
exp(output$loglik_visited)
output$iter_visit
output$time_taken
dim(output$states)
output$states[,1,1]
sum(output$states[,1,1])
##### Testing binary vector #####
rm(list=ls())
source("functions/r_functions.R")
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
a <- createBinaryVector(c(1,500,800,350,850,-1),800)
a <- createBinaryVector(c(1,500,800,350,850),800)
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
a <- createBinaryVector(c(1,500,800,350,850,-1),800)
a
which(a==1)
# Choose dimension
chosen_dim <- "highdim"; file_dim <- "highd"
# chosen_dim <- "lowdim";file_dim <- "lowd" #,10000,1000,5000
chosen_ids <-c(14)#c(25,26,27)#c(17,18,19,20)#c(25,26,27)#c(9,10,11,12)   #c(20,21,22) # c(13,14,15,16)
#List of files
parameters <- read_csv(paste0("results/simulation_details_",file_dim,".csv"))
#Create table with available files
data_sum <- tibble(file_names=list.files(path = "results", pattern = "^sim_.*\\.Rds")) |>
mutate(id=as.numeric(str_extract(file_names, "(?<=id_)[0-9]+(?=\\.Rds)")),
dim=str_extract(file_names, "(?<=sim_)[^_]+(?=_id)")) |>
filter(dim==chosen_dim) |>
left_join(parameters, by="id")
rm(list=ls())
# Import libraries
library(stringr)
library(tidyverse)
library(gridExtra)# For tables
library(latex2exp) #For using latex
### Process simulation results ###
# Choose dimension
chosen_dim <- "highdim"; file_dim <- "highd"
# chosen_dim <- "lowdim";file_dim <- "lowd" #,10000,1000,5000
chosen_ids <-c(14)#c(25,26,27)#c(17,18,19,20)#c(25,26,27)#c(9,10,11,12)   #c(20,21,22) # c(13,14,15,16)
#List of files
parameters <- read_csv(paste0("results/simulation_details_",file_dim,".csv"))
#Create table with available files
data_sum <- tibble(file_names=list.files(path = "results", pattern = "^sim_.*\\.Rds")) |>
mutate(id=as.numeric(str_extract(file_names, "(?<=id_)[0-9]+(?=\\.Rds)")),
dim=str_extract(file_names, "(?<=sim_)[^_]+(?=_id)")) |>
filter(dim==chosen_dim) |>
left_join(parameters, by="id")
# filter IDs to compare
data_sum <- data_sum |> filter(id %in% chosen_ids)
if(chosen_dim=="lowdim"){
#Low dim is the example with 7 modes and 4 temperatures
tvd <- data.frame(alg=NA,sim=NA,tvd=NA)
mode_visit <- as.data.frame(matrix(NA,ncol=10)); colnames(mode_visit) <- c("alg","sim","interswap",1:7)
round_trip <- as.data.frame(matrix(NA,ncol=6)); colnames(round_trip) <- c("alg","sim",1:4)
swap_rate <- as.data.frame(matrix(NA,ncol=5)); colnames(swap_rate) <- c("alg","sim",1:3)
iterations <- as.data.frame(matrix(NA,ncol=6)); colnames(iterations) <- c("alg","sim",1:4)
pi_modes <- as.data.frame(matrix(NA,ncol=9));colnames(pi_modes) <- c("alg","sim",1:7)
# Low dimensional true probability setup
{
Rcpp::sourceCpp("functions/cpp_functions.cpp") #To use vec_to_num function
source("functions/r_functions.R")
p <- 16 #dimension
theta <- 8 #tail weight parameter
# Modes definition
mod1 <- c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)#rep(1,p)
mod2 <- c(1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0)
mod3 <- c(0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1)
mod4 <- c(1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0)
mod5 <- c(0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1)
mod6 <- c(1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1)
mod7 <- c(0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0)
modes <- c(vec_to_num(mod1),  vec_to_num(mod2),  vec_to_num(mod3),  vec_to_num(mod4),  vec_to_num(mod5),  vec_to_num(mod6),  vec_to_num(mod7))
modes_list <- list(mod1,mod2,mod3,mod4,mod5,mod6,mod7)
### Compute true probability
pi.true <- rep(0,2^p)
for(i in 0:(2^p -1)){
pi.true[i+1] <-  ll_comp(NumberToVector(i,p),modes_list,theta,p)
}
pi.true <- exp(pi.true)/(length(modes_list)*(1+exp(-theta))^p)
}
}
if(chosen_dim=="highdim"){
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp") #To use eval_lik function
#High dim we have 3 temperatures
#we dont track distribution convergence
#we track visit to high probability states
round_trip <- as.data.frame(matrix(NA,ncol=5)); colnames(round_trip) <- c("alg","sim",1:3)
swap_rate <- as.data.frame(matrix(NA,ncol=4)); colnames(swap_rate) <- c("alg","sim",1:2)
iterations <- as.data.frame(matrix(NA,ncol=5)); colnames(iterations) <- c("alg","sim",1:3)
list_of_states <- list()
iter_visit <- as.data.frame(matrix(NA,ncol=max(data_sum$simulations)+2));colnames(iter_visit) <- c("alg","state",1:max(data_sum$simulations))
loglik_visited <- as.data.frame(matrix(NA,ncol=max(data_sum$simulations)+2));colnames(loglik_visited) <- c("alg","state",1:max(data_sum$simulations))
}
time_taken <- as.data.frame(matrix(NA,ncol=2));colnames(time_taken) <- c("alg","time")
full_iter <- list()
k <- 1
Q <- 1
i <- 1
data <- readRDS(file.path("results",data_sum[i,1]))
names(data)
data$round_trips
data$ip
dim(data$states)
data$states[,1,1]
sum(data$states[,1,1])
sum(data$states[,2,1])
sum(data$states[,3,1])
data$states[,3,1]==data$states[,2,1]
data$loglik_visited
exp(data$loglik_visited)
data$time_taken
data$time_taken/3600
names(data)
data$swap_rate
rm(list=ls())
source("functions/r_functions.R")
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
id_chosen <- 4
p <- 800
temperature <- c(1,0.18,0.09)
bal_f <- c("sq","sq","sq")
total_simulations <- 50
total_swap <- 200
set.seed(123)
output <- PT_IIT_sim(p,startsim=1, endsim=2,numiter=100,iterswap=25,burn_in=100,temperature,bal_f,TRUE,"gset/G1.txt",20)
eval_lik("gset/G1.txt",rep(0,800))
eval_lik("gset/G1.txt",rep(1,800))
log(-.05)
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
eval_lik("gset/G1.txt",rep(1,800))
eval_loglik("gset/G1.txt",rep(1,800))
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
eval_loglik("gset/G1.txt",rep(1,800))
eval_loglik("gset/G1.txt",rep(0,800))
rep(0:1,each=400)
rep(0:1,400)
eval_loglik("gset/G1.txt",rep(0:1,400))
eval_lik("gset/G1.txt",rep(0:1,400))
eval_lik("gset/G1.txt",rep(0:1,each=400))
log(11624)
log(11623)
exp(9.360741)
exp(9.360741)*10
exp(9.360741)*100
exp(9.360741)*1000
exp(9.360741)*10000
exp(9.360741)*100000
exp(9.360741)*1000000
exp(9.360741)*10000000
createBinaryVector(c(1,50,45)-1,50)
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
#### Testing initializing the high dimensional problem
rm(list=ls())
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
createBinaryVector(c(1,4,5,10)-1,10)
initializeMatrix(c(1,4,5,10)-1,10)
initializeMatrix(c(1,4,5,10)-1,10,5)
initializeMatrix(-1,10,5)
initializeMatrix(1000,10,5)
initializeMatrix(-5,10,5)
initializeMatrix(5,10,5)
initializeMatrix(c(1,10,5)-1,10,5)
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
sqrt(800)
rm(list=ls())
library(Rcpp)
library(RcppArmadillo)
library(dplyr)
library(readr)
# install.packages("Rcpp")
# install.packages("RcppArmadillo")
# install.packages("readr")
# install.packages("tidyverse")
##### import functions #####
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
source("functions/r_functions.R")
##### Read file for parameters #####
parameters <- as.data.frame(read_csv("results/simulation_details_highd.csv"))
#### Prompt to choose which simulation to run
writeLines("You can write various IDs separated by commas")
list_ids <- readline('Choose id:')
list_ids <- as.numeric(unlist(strsplit(list_ids,",")))
id_chosen <- 20
sim_chosen <- parameters |> filter(id==id_chosen)
if(nrow(sim_chosen)!=1){print(paste0("Error: id ",id_chosen," doesn't exist or there's more than one")); next;}
# Parameters for all algorithms
total_simulations <- sim_chosen$simulations
temperatures <- as.numeric(sim_chosen |> select(matches("^t\\d+$")))
bal_f <- as.character(sim_chosen|> select(matches("^bf")))
defined_seed <- sim_chosen$seed
set.seed(defined_seed)
#Parameters for PT with IIT
total_iter <- sim_chosen$iterations #300000 #Total number of steps to perform in each replica
iterswap <- sim_chosen$interswap #Total iterations before trying a replica swap
#Parameters for PT with a-IIT
sample_inter_swap <- sim_chosen$interswap #Number of original samples to get before trying a replica swap
total_swap <- sim_chosen$total_swap #Total number of swaps to try
burnin_iter <- sim_chosen$burn_in #Number of iterations for burn-in
file_matrix <- paste0("gset/",sim_chosen$file,".txt")
p <- readParameters(file_matrix)
states_visited <- sim_chosen$states_visited
# start_state <- sim_chosen$start_state;
alg <- sim_chosen$algorithm
export <- list();
writeLines(c("Parameters:",paste0("Algorithm: ",alg),
paste0("ID: ",id_chosen),
paste0("Seed: ",defined_seed),
paste0("Total simulations: ",total_simulations),
paste0("Burn-in iterations: ",burnin_iter),
paste0("Temperatures: ",paste(temperatures,collapse=',')),
paste0("Balancing functions: ",paste(bal_f,collapse = ',')),
paste0("Total iterations: ",total_iter),
paste0("Try swaps:",iterswap),
paste0("Samples in-between swaps: ",sample_inter_swap),
paste0("Total swaps:",total_swap),
paste0("File: ",file_matrix),
paste0("States to keep track: ",states_visited)))
# check <- as.numeric(readline('ok? 1 Yes/ 0 No'))
check <- 1;
sim_chosen$start_state
rm(list=ls())
library(Rcpp)
library(RcppArmadillo)
library(dplyr)
library(readr)
# install.packages("Rcpp")
# install.packages("RcppArmadillo")
# install.packages("readr")
# install.packages("tidyverse")
##### import functions #####
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
source("functions/r_functions.R")
##### Read file for parameters #####
parameters <- as.data.frame(read_csv("results/simulation_details_highd.csv"))
#### Prompt to choose which simulation to run
writeLines("You can write various IDs separated by commas")
list_ids <- readline('Choose id:')
id_chosen <- 20
sim_chosen <- parameters |> filter(id==id_chosen)
if(nrow(sim_chosen)!=1){print(paste0("Error: id ",id_chosen," doesn't exist or there's more than one")); next;}
str(sim_chosen)
sim_chosen$start_state
parameters |> filter(id==5)
str(parameters |> filter(id==5))
parameters |> filter(id==5) |> pull(start_state)
parameters |> filter(id==20) |> pull(start_state)
##### Read file for parameters #####
parameters <- as.data.frame(read_csv("results/simulation_details_highd.csv"))
parameters |> filter(id==20) |> pull(start_state)
test <- parameters |> filter(id==20) |> pull(start_state)
as.bumeric(test)
as.numeric(test)
strsplit(test,",")
unlist(strsplit(test,","))
as.numeric(unlist(strsplit(test,",")))
test2 <- as.numeric(unlist(strsplit(test,",")))
class(test2)
start_state <- as.numeric(unlist(strsplit(sim_chosen$start_state,",")))
as.numeric(unlist(strsplit(sim_chosen$start_state,",")))
sim_chosen$start_state
##### Read file for parameters #####
parameters <- as.data.frame(read_csv("results/simulation_details_highd.csv"))
sim_chosen <- parameters |> filter(id==id_chosen)
start_state <- as.numeric(unlist(strsplit(sim_chosen$start_state,",")))
start_state
which(rep(0:1,400))
which(rep(0:1,400)==1)
paste0(which(rep(0:1,400)==1)-1,collapse=',')
paste0(which(rep(1:0,400)==1)-1,collapse=',')
paste0(which(rep(1,800)==1)-1,collapse=',')
id_chosen <- 24
##### Read file for parameters #####
parameters <- as.data.frame(read_csv("results/simulation_details_highd.csv"))
sim_chosen <- parameters |> filter(id==id_chosen)
start_state <- as.numeric(unlist(strsplit(sim_chosen$start_state,",")))
start_state
test <- "23,24"
test_function(x){print(x)}
test_function <- function(x){print(x)}
test_function(5)
test_function("123sgdfs")
test_function
test_function <- function(x){if(missing(x)){print("missing x")}else{print(x)}}
test_function(123)
test_function(asdfasdf)
test_function("asdfasdf")
test_function()
getwd()
dir()
list.dir()
list.dirs()
list.dirs(recursive=F)
"./results" %in% list.dirs(recursive=F)
"./results" %in% list.dirs(recursive=F)
!("./results" %in% list.dirs(recursive=F))
11624/9500
log(11624)/log(9500)
exp(11624-9500)
(11624/9500)^2
(11624/9500)^10
eval_lik("gset/G1.txt",rbinom(800,1,0.8))
eval_lik("gset/G1.txt",rbinom(800,1,0.7))
eval_lik("gset/G1.txt",rbinom(800,1,runif(1)))
eval_lik("gset/G1.txt",rbinom(800,1,runif(1)))
eval_lik("gset/G1.txt",rbinom(800,1,runif(1)))
eval_lik("gset/G1.txt",rbinom(800,1,runif(1)))
eval_lik("gset/G1.txt",rbinom(800,1,runif(1)))
eval_lik("gset/G1.txt",rbinom(800,1,runif(1)))
eval_lik("gset/G1.txt",rbinom(800,1,runif(1)))
eval_lik("gset/G1.txt",rbinom(800,1,runif(1)))
eval_lik("gset/G1.txt",rbinom(800,1,runif(1)))
eval_lik("gset/G1.txt",rbinom(800,1,runif(1)))
eval_lik("gset/G1.txt",rbinom(800,1,runif(1)))
eval_lik("gset/G1.txt",rbinom(800,1,runif(1)))
eval_lik("gset/G1.txt",rbinom(800,1,runif(1)))
eval_lik("gset/G1.txt",rbinom(800,1,runif(1)))
eval_lik("gset/G1.txt",rbinom(800,1,runif(1)))
eval_lik("gset/G1.txt",rbinom(800,1,runif(1)))
eval_lik("gset/G1.txt",rbinom(800,1,runif(1)))
eval_lik("gset/G1.txt",rbinom(800,1,runif(1)))
eval_lik("gset/G1.txt",rbinom(800,1,runif(1)))
eval_lik("gset/G1.txt",rbinom(800,1,runif(1)))
eval_lik("gset/G1.txt",rbinom(800,1,runif(1)))
eval_lik("gset/G1.txt",rbinom(800,1,runif(1)))
eval_lik("gset/G1.txt",rbinom(800,1,runif(1)))
eval_lik("gset/G1.txt",rbinom(800,1,runif(1)))
9246/9275
9275/9246
(9275/9246)10
(9275/9246)^10
(11624/9246)^10
(11624/9246)^100
(11624/9246)^10
(11624/9246)^50
(11624/9246)^20
data <- vector(length=N)
N <- 100000
data <- vector(length=N)
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
hist_lik("gset/G1.txt",10,0.5)
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
hist_lik("gset/G1.txt",10,0.4)
check <- hist_lik("gset/G1.txt",100000,0.4)
hist(check)
check <- hist_lik("gset/G1.txt",500000,0.3)
hist(check)
max(check)
min(check)
check <- hist_lik("gset/G1.txt",500000,0.7)
hist(check)
max(check)
min(check)
#### Testing random likelihoods
rm(list=ls())
