IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
state_matrix
state_matrix
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
#manual input for testing
# weight_matrix[p+1,3] <- 30
# weight_matrix[3,1] <- 40
IPT_update(weight_matrix,state_matrix,temperature,ip,bal_f)
state_matrix
ip
library(Rcpp)
library(RcppArmadillo)
a <- readSparseMatrix(file.path(getwd(),"gset/G_example.txt"))
source("functions/r_functions.R")
a
a <- readSparseMatrix(file.path(getwd(),"gset/G_example.txt"))
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
a <- readSparseMatrix(file.path(getwd(),"gset/G_example.txt"))
source("functions/r_functions.R")
M <- readMatrix("gset/G_example.txt")
M
source("functions/r_functions.R")
M <- readMatrix("gset/G_example.txt")
dim <- nrow(M)
v <- rep(0,dim)
M
source("functions/r_functions.R")
M <- readMatrix("gset/ex_paper.txt")
M
source("functions/r_functions.R")
M <- readMatrix("gset/ex_paper.txt")
M
source("functions/r_functions.R")
M <- readMatrix("gset/ex_paper.txt")
M
x <- c(0,1,1,0,0)
x%*%M%*%x
y <- c(1,0,0,1,0)
y%*%M%*%y
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
rm(list=ls())
library(Rcpp)
library(RcppArmadillo)
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
print_matrix("gset/ex_paper.txt")
x <- c(0,1,1,0,0)
y <- c(1,0,0,1,0)
testing_loglik("gset/ex_paper.txt",x)
testing_loglik("gset/ex_paper.txt",x)
x
library(Rcpp)
library(RcppArmadillo)
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
testing_loglik("gset/ex_paper.txt",x)
print_matrix("gset/ex_paper.txt")
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
print_matrix("gset/ex_paper.txt")
testing_loglik("gset/ex_paper.txt",x)
x%*%M%*%x
source("functions/r_functions.R")
M <- readMatrix("gset/ex_paper.txt")
x <- c(0,1,1,0,0)
x%*%M%*%x
x
print_matrix("gset/G1.txt")
v2 <- rbinom(800,size=1,prob=0.4)
sum(v2)
mean(v2)
v3 <- rep(0:1,400)
v3
length(v3)
length(v2)
length(v)
v <- rep(1,800)
set.seed(345)
v2 <- rbinom(800,size=1,prob=0.4)
v3 <- rep(0:1,400)
testing_loglik("gset/G1.txt",x)
testing_loglik("gset/G1.txt",v)
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
# Testing matrix of size 800
print_matrix("gset/G1.txt")
testing_loglik("gset/G1.txt",v)
check <- testing_loglik("gset/G1.txt",v)
min(check)
max(check)
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
check <- testing_loglik("gset/G1.txt",v)
head(check)
min(check)
max(check)
log(11624)
source("functions/r_functions.R")
M <- readMatrix("gset/ex_paper.txt")
x <- c(0,1,1,0,0)
x%*%M%*%x
y <- c(1,0,0,1,0)
y%*%M%*%y
testing_loglik("gset/ex_paper.txt",x)
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
testing_loglik("gset/ex_paper.txt",x)
print_matrix("gset/ex_paper.txt")
testing_loglik("gset/ex_paper.txt",x)
vec_to_num(2)
vec_to_num(1)
vec_to_num(3)
vec_to_num(4)
vec_to_num(40)
vec_to_num(100)
vec_to_num(c(1,0,1,0,1,1,1))
vec_to_num(1)
vec_to_num(c(1,0))
vec_to_num(c(1,1))
vec_to_num(c(1,0,1))
num_to_vec(3,5)
num_to_vec(3,10)
num_to_vec(5,7)
rm(list=ls())
library(Rcpp)
library(RcppArmadillo)
library(dplyr)
library(readr)
##### import functions #####
Rcpp::sourceCpp("functions/cpp_functions.cpp")
source("functions/r_functions.R")
##### Read file for parameters #####
parameters <- read_csv("results/simulation_details_lowd.csv")
parameters
#### Prompt to choose which simulation to run
writeLines(c('Choose id:'))
id_chosen <- as.numeric(readline('Choose id:'))
id_chosen
##### Read file for parameters #####
parameters <- as.tibble(read_csv("results/simulation_details_lowd.csv"))
library(Rcpp)
library(RcppArmadillo)
library(dplyr)
library(readr)
##### Read file for parameters #####
parameters <- as.data.table(read_csv("results/simulation_details_lowd.csv"))
##### Read file for parameters #####
parameters <- data.table(read_csv("results/simulation_details_lowd.csv"))
##### Read file for parameters #####
parameters <- data.frame(read_csv("results/simulation_details_lowd.csv"))
##### Read file for parameters #####
parameters <- as.data.frame(read_csv("results/simulation_details_lowd.csv"))
parameters
str(parameters)
id_chosen
sim_chosen <- parameters |> filter(id==id_chosen)
sim_chosen
str(sim_chosen)
sim_chosen$simulations
paste0(t,1:4)
paste0("t",1:4)
# Parameters for all algorithms
total_simulations <- sim_chosen$simulations
temperatures <- sim_chosen[paste0("t",1:4)]
temperatures
class(temperatures)
class(total_simulations)
temperatures <- sim_chosen |> pull("t",1:4)
temperatures <- sim_chosen |> pull(paste0("t",1:4))
temperatures <- as.numeric(sim_chosen[paste0("t",1:4)])
temperaut
temperatures
class(temperatures)
sim_chosen
bal_f <- as.character(sim_chosen[paste0("bf",1:4)])
bal_f
class(bal_f)
parameters |> filter(id==100)
dim(parameters |> filter(id==100))
nrow(parameters |> filter(id==100))
nrow(parameters |> filter(id==1))
sim_chosen$algorithm
alg <- sim_chosen$algorithm
alg
##### Read file for parameters #####
parameters <- as.data.frame(read_csv("results/simulation_details_lowd.csv"))
id_chosen <- 0
sim_chosen <- parameters |> filter(id==id_chosen)
sim_chosen
nrow(sim_chosen)
2^800
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
