check <- testing_loglik("gset/G1.txt",v)
min(check)
max(check)
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
check <- testing_loglik("gset/G1.txt",v)
head(check)
min(check)
max(check)
log(11624)
source("functions/r_functions.R")
M <- readMatrix("gset/ex_paper.txt")
x <- c(0,1,1,0,0)
x%*%M%*%x
y <- c(1,0,0,1,0)
y%*%M%*%y
testing_loglik("gset/ex_paper.txt",x)
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
testing_loglik("gset/ex_paper.txt",x)
print_matrix("gset/ex_paper.txt")
testing_loglik("gset/ex_paper.txt",x)
vec_to_num(2)
vec_to_num(1)
vec_to_num(3)
vec_to_num(4)
vec_to_num(40)
vec_to_num(100)
vec_to_num(c(1,0,1,0,1,1,1))
vec_to_num(1)
vec_to_num(c(1,0))
vec_to_num(c(1,1))
vec_to_num(c(1,0,1))
num_to_vec(3,5)
num_to_vec(3,10)
num_to_vec(5,7)
rm(list=ls())
library(Rcpp)
library(RcppArmadillo)
library(dplyr)
library(readr)
##### import functions #####
Rcpp::sourceCpp("functions/cpp_functions.cpp")
source("functions/r_functions.R")
##### Read file for parameters #####
parameters <- read_csv("results/simulation_details_lowd.csv")
parameters
#### Prompt to choose which simulation to run
writeLines(c('Choose id:'))
id_chosen <- as.numeric(readline('Choose id:'))
id_chosen
##### Read file for parameters #####
parameters <- as.tibble(read_csv("results/simulation_details_lowd.csv"))
library(Rcpp)
library(RcppArmadillo)
library(dplyr)
library(readr)
##### Read file for parameters #####
parameters <- as.data.table(read_csv("results/simulation_details_lowd.csv"))
##### Read file for parameters #####
parameters <- data.table(read_csv("results/simulation_details_lowd.csv"))
##### Read file for parameters #####
parameters <- data.frame(read_csv("results/simulation_details_lowd.csv"))
##### Read file for parameters #####
parameters <- as.data.frame(read_csv("results/simulation_details_lowd.csv"))
parameters
str(parameters)
id_chosen
sim_chosen <- parameters |> filter(id==id_chosen)
sim_chosen
str(sim_chosen)
sim_chosen$simulations
paste0(t,1:4)
paste0("t",1:4)
# Parameters for all algorithms
total_simulations <- sim_chosen$simulations
temperatures <- sim_chosen[paste0("t",1:4)]
temperatures
class(temperatures)
class(total_simulations)
temperatures <- sim_chosen |> pull("t",1:4)
temperatures <- sim_chosen |> pull(paste0("t",1:4))
temperatures <- as.numeric(sim_chosen[paste0("t",1:4)])
temperaut
temperatures
class(temperatures)
sim_chosen
bal_f <- as.character(sim_chosen[paste0("bf",1:4)])
bal_f
class(bal_f)
parameters |> filter(id==100)
dim(parameters |> filter(id==100))
nrow(parameters |> filter(id==100))
nrow(parameters |> filter(id==1))
sim_chosen$algorithm
alg <- sim_chosen$algorithm
alg
##### Read file for parameters #####
parameters <- as.data.frame(read_csv("results/simulation_details_lowd.csv"))
id_chosen <- 0
sim_chosen <- parameters |> filter(id==id_chosen)
sim_chosen
nrow(sim_chosen)
2^800
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
vec_to_num(rep(1,16))
rep(1,16)
vec_to_num(c(1,1,1,0,1))
a <- c(1,1,1,0,1)
vec_to_num(a)
# setwd('..')
Rcpp::sourceCpp("functions/cpp_functions.cpp")
vec_to_num(c(1,1,1,0,1))
vec_to_num(rep(1,16))
2^16
vec_to_num(c(1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1))
length(c(1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1))
num_to_vec(63519,16)
#### Prompt to choose which simulation to run
id_chosen <- as.numeric(readline('Choose id:'))
#### Prompt to choose which simulation to run
id_chosen <- readline('Choose id:')
id_chosen
strsplit(id_chosen,",")
unlist(strsplit(id_chosen,","))
class(unlist(strsplit(id_chosen,",")))
#### Prompt to choose which simulation to run
id_chosen <- readline('You can write various IDs separated by commas \n Choose id:')
writeLines("You can write various IDs separated by commas")
id_chosen <- readline('Choose id:')
id_chosen <- unlist(strsplit(id_chosen),",")
id_chosen
id_chosen <- unlist(strsplit(id_chosen,","))
id_chosen
#### Prompt to choose which simulation to run
writeLines("You can write various IDs separated by commas")
id_chosen <- readline('Choose id:')
#### Prompt to choose which simulation to run
writeLines("You can write various IDs separated by commas")
id_chosen <- readline('Choose id:')
id_chosen <- as.numeric(unlist(strsplit(id_chosen,",")))
class(id_chosen)
id_chosen
id_chosen <- readline('Choose id:')
id_chosen <- as.numeric(unlist(strsplit(id_chosen,",")))
id_chosen
##### Testing minimum #####
library(Rcpp)
library(RcppArmadillo)
# setwd('..')
Rcpp::sourceCpp("functions/testing_cpp_functions.cpp")
# setwd('..')
Rcpp::sourceCpp("functions/testing_cpp_functions.cpp")
find_min(X,5)
find_min(x,5)
x <- c(0,0,0,0,0)
find_min(x,5)
x
x <- c(0,0,0,0,0)
x <- c(0,0,0,0,0)
find_min(x,5);x;
find_min(x,4);x;
find_min(x,2);x;
find_min(x,1);x;
find_min(x,40);x;
find_min(x,65);x;
find_min(x,-1);x;
find_min(x,100);x
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
p <- 800
temperature <- c(1,0.18,0.09)
bal_f <- c("sq","sq","sq")
check <- PT_IIT_sim(p,1,2,1000,100,temperature,bal_f,TRUE,"gset/G1.txt",20)
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
p <- 800
temperature <- c(1,0.18,0.09)
bal_f <- c("sq","sq","sq")
check <- PT_IIT_sim(p,1,2,1000,100,temperature,bal_f,TRUE,"gset/G1.txt",20)
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
p <- 800
temperature <- c(1,0.18,0.09)
bal_f <- c("sq","sq","sq")
check <- PT_IIT_sim(p,1,2,1000,100,temperature,bal_f,TRUE,"gset/G1.txt",20)
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
p <- 800
temperature <- c(1,0.18,0.09)
bal_f <- c("sq","sq","sq")
check <- PT_IIT_sim(p,1,2,1000,100,temperature,bal_f,TRUE,"gset/G1.txt",20)
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
p <- 800
temperature <- c(1,0.18,0.09)
bal_f <- c("sq","sq","sq")
check <- PT_IIT_sim(p,1,2,1000,100,temperature,bal_f,TRUE,"gset/G1.txt",20)
names(check)
check$loglik_visited
check$iter_visit
check$states
check$states[,1:2,1]
check$states[,1,1:2]
library(RcppArmadillo)
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
p <- 800
temperature <- c(1,0.18,0.09)
bal_f <- c("sq","sq","sq")
set.see(123)
set.seed(123)
check <- PT_IIT_sim(p,1,2,1000,100,temperature,bal_f,TRUE,"gset/G1.txt",20)
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
p <- 800
temperature <- c(1,0.18,0.09)
bal_f <- c("sq","sq","sq")
set.seed(123)
check <- PT_IIT_sim(p,1,2,100,50,temperature,bal_f,TRUE,"gset/G1.txt",20)
check$loglik_visited
check$iter_visit
check$states[,,1]
#(int p,int startsim,int endsim, int numiter,int iterswap, vec temp, const std::vector<std::string>& bal_function, bool bias_fix,const std::string& filename,int num_states_visited)
set.seed(123)
check2 <- PT_IIT_sim(p,1,2,100,50,temperature,bal_f,FALSE,"gset/G1.txt",20)
# PT_a_IIT_sim(int p,int startsim,int endsim, int total_swaps,int sample_inter_swap, vec temp, const std::vector<std::string>& bal_function,const std::string& filename,int num_states_visited)
set.seed(123)
check3 <- PT_a_IIT_sim(p,1,2,5,100,temperature,bal_f,"gset/G1.txt",20)
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
set.seed(123)
check3 <- PT_a_IIT_sim(p,1,2,5,100,temperature,bal_f,"gset/G1.txt",20)
getwd()
# id	algorithm	simulations	iterations	interswap	total_swap	start_state	seed	bf1	bf2	bf3	t1	t2	t3
# 4	PT_A_IIT	50	NA	1000	200	0	123	sq	sq	sq	1	0.18	0.09
source("functions/r_functions.R")
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
output_name <- paste0("sim_lowdim_id_",id_chosen,".Rds")
output_name
id_chosen <- 4
output_name
id_chosen
output_name <- paste0("sim_lowdim_id_",id_chosen,".Rds")
output_name
source("functions/r_functions.R")
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
id_chosen <- 4
p <- 800
temperature <- c(1,0.18,0.09)
bal_f <- c("sq","sq","sq")
set.seed(123)
output <- PT_a_IIT_sim(p,1,50,200,1000,temperature,bal_f,"gset/G1.txt",30)
rm(list=ls())
source("functions/r_functions.R")
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
id_chosen <- 4
p <- 800
temperature <- c(1,0.18,0.09)
bal_f <- c("sq","sq","sq")
set.seed(123)
output <- PT_a_IIT_sim(p,1,50,200,1000,temperature,bal_f,"gset/G1.txt",30)
output <- PT_a_IIT_sim(p,startsim=1, endsim=total_simulations,total_swap,sample_inter_swap,temperatures,bal_f)
names(output)
output$loglik_visited
names(output)
export <- list();
#Number of iterations needed between swaps for each replica
export[["total_iter"]] <- output[["total_iter"]]
#round trip rate (NA for IIT)
export[["round_trips"]] <- PT_RT(output[["ip"]],total_swap,total_simulations)
total_simulations <- 50
total_swap <- 200
#round trip rate (NA for IIT)
export[["round_trips"]] <- PT_RT(output[["ip"]],total_swap,total_simulations)
export[["swap_rate"]] <- output[["swap_rate"]]
export[["states"]] <- output[["states"]]
export[["loglik_visited"]] <- output[["loglik_visited"]]
export[["iter_visit"]]<- output[["iter_visit"]]
output_name <- paste0("sim_lowdim_id_",id_chosen,".Rds")
saveRDS(export,file=file.path("results",output_name))
##### import functions #####
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
rm(list=ls())
library(Rcpp)
library(RcppArmadillo)
library(dplyr)
library(readr)
##### import functions #####
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
source("functions/r_functions.R")
##### Read file for parameters #####
parameters <- as.data.frame(read_csv("results/simulation_details_highd.csv"))
#### Prompt to choose which simulation to run
# writeLines("You can write various IDs separated by commas")
id_chosen <- as.numeric(readline('Choose id:'))
sim_chosen <- parameters |> filter(id==id_chosen)
sim_chosen
# Parameters for all algorithms
total_simulations <- sim_chosen$simulations
temperatures <- as.numeric(sim_chosen[paste0("t",1:3)])
bal_f <- as.character(sim_chosen[paste0("bf",1:3)])
defined_seed <- sim_chosen$seed
set.seed(defined_seed)
#Parameters for PT with IIT
total_iter <- sim_chosen$iterations #300000 #Total number of steps to perform in each replica
iterswap <- sim_chosen$interswap #Total iterations before trying a replica swap
#Parameters for PT with a-IIT
sample_inter_swap <- sim_chosen$interswap #Number of original samples to get before trying a replica swap
total_swap <- sim_chosen$total_swap #Total number of swaps to try
file_matrix <- paste0("gset/",sim_chosen$file,".txt")
p <- readParameters(file_matrix)
file_matrix
p
# start_state <- sim_chosen$start_state;
alg <- sim_chosen$algorithm
export <- list();
writeLines(c("Parameters:",paste0("Algorithm: ",alg),
paste0("Seed: ",defined_seed),
paste0("Total simulations: ",total_simulations),
paste0("Temperatures: ",paste(temperatures,collapse=',')),
paste0("Balancing functions: ",paste(bal_f,collapse = ',')),
paste0("Total iterations: ",total_iter),
paste0("Try swaps:",iterswap),
paste0("Samples in-between swaps: ",sample_inter_swap),
paste0("Total swaps:",total_swap),"","","Confirm below"))
##### Read file for parameters #####
parameters <- as.data.frame(read_csv("results/simulation_details_highd.csv"))
#### Prompt to choose which simulation to run
# writeLines("You can write various IDs separated by commas")
id_chosen <- as.numeric(readline('Choose id:'))
if(nrow(sim_chosen)!=1){print(paste0("Error: id ",id_chosen," doesn't exist or there's more than one")); next;}
# Parameters for all algorithms
total_simulations <- sim_chosen$simulations
temperatures <- as.numeric(sim_chosen[paste0("t",1:3)])
bal_f <- as.character(sim_chosen[paste0("bf",1:3)])
defined_seed <- sim_chosen$seed
set.seed(defined_seed)
#Parameters for PT with IIT
total_iter <- sim_chosen$iterations #300000 #Total number of steps to perform in each replica
iterswap <- sim_chosen$interswap #Total iterations before trying a replica swap
#Parameters for PT with a-IIT
sample_inter_swap <- sim_chosen$interswap #Number of original samples to get before trying a replica swap
total_swap <- sim_chosen$total_swap #Total number of swaps to try
file_matrix <- paste0("gset/",sim_chosen$file,".txt")
p <- readParameters(file_matrix)
states_visited <- sim_chosen$states_visited
# start_state <- sim_chosen$start_state;
alg <- sim_chosen$algorithm
export <- list();
writeLines(c("Parameters:",paste0("Algorithm: ",alg),
paste0("Seed: ",defined_seed),
paste0("Total simulations: ",total_simulations),
paste0("Temperatures: ",paste(temperatures,collapse=',')),
paste0("Balancing functions: ",paste(bal_f,collapse = ',')),
paste0("Total iterations: ",total_iter),
paste0("Try swaps:",iterswap),
paste0("Samples in-between swaps: ",sample_inter_swap),
paste0("Total swaps:",total_swap),"","","Confirm below"),
paste0("File: ",file_matrix),
paste0("States to keep track: ",states_visited))
file_matrix
rm(list=ls())
library(Rcpp)
library(RcppArmadillo)
library(dplyr)
library(readr)
##### import functions #####
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
source("functions/r_functions.R")
##### Read file for parameters #####
parameters <- as.data.frame(read_csv("results/simulation_details_highd.csv"))
#### Prompt to choose which simulation to run
# writeLines("You can write various IDs separated by commas")
id_chosen <- as.numeric(readline('Choose id:'))
sim_chosen <- parameters |> filter(id==id_chosen)
if(nrow(sim_chosen)!=1){print(paste0("Error: id ",id_chosen," doesn't exist or there's more than one")); next;}
#Parameters for PT with IIT
total_iter <- sim_chosen$iterations #300000 #Total number of steps to perform in each replica
iterswap <- sim_chosen$interswap #Total iterations before trying a replica swap
rm(list=ls())
library(Rcpp)
library(RcppArmadillo)
library(dplyr)
library(readr)
##### import functions #####
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
source("functions/r_functions.R")
##### Read file for parameters #####
parameters <- as.data.frame(read_csv("results/simulation_details_highd.csv"))
#### Prompt to choose which simulation to run
# writeLines("You can write various IDs separated by commas")
id_chosen <- as.numeric(readline('Choose id:'))
sim_chosen <- parameters |> filter(id==id_chosen)
if(nrow(sim_chosen)!=1){print(paste0("Error: id ",id_chosen," doesn't exist or there's more than one")); next;}
rm(list=ls())
library(Rcpp)
library(RcppArmadillo)
library(dplyr)
library(readr)
##### import functions #####
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp")
source("functions/r_functions.R")
##### Read file for parameters #####
parameters <- as.data.frame(read_csv("results/simulation_details_highd.csv"))
#### Prompt to choose which simulation to run
# writeLines("You can write various IDs separated by commas")
id_chosen <- as.numeric(readline('Choose id:'))
sim_chosen <- parameters |> filter(id==id_chosen)
if(nrow(sim_chosen)!=1){print(paste0("Error: id ",id_chosen," doesn't exist or there's more than one")); next;}
# Parameters for all algorithms
total_simulations <- sim_chosen$simulations
temperatures <- as.numeric(sim_chosen[paste0("t",1:3)])
bal_f <- as.character(sim_chosen[paste0("bf",1:3)])
defined_seed <- sim_chosen$seed
set.seed(defined_seed)
#Parameters for PT with IIT
total_iter <- sim_chosen$iterations #300000 #Total number of steps to perform in each replica
iterswap <- sim_chosen$interswap #Total iterations before trying a replica swap
#Parameters for PT with a-IIT
sample_inter_swap <- sim_chosen$interswap #Number of original samples to get before trying a replica swap
total_swap <- sim_chosen$total_swap #Total number of swaps to try
file_matrix <- paste0("gset/",sim_chosen$file,".txt")
p <- readParameters(file_matrix)
states_visited <- sim_chosen$states_visited
# start_state <- sim_chosen$start_state;
alg <- sim_chosen$algorithm
export <- list();
writeLines(c("Parameters:",paste0("Algorithm: ",alg),
paste0("Seed: ",defined_seed),
paste0("Total simulations: ",total_simulations),
paste0("Temperatures: ",paste(temperatures,collapse=',')),
paste0("Balancing functions: ",paste(bal_f,collapse = ',')),
paste0("Total iterations: ",total_iter),
paste0("Try swaps:",iterswap),
paste0("Samples in-between swaps: ",sample_inter_swap),
paste0("Total swaps:",total_swap),"","","Confirm below"),
paste0("File: ",file_matrix),
paste0("States to keep track: ",states_visited))
paste0("File: ",file_matrix)
c("Parameters:",paste0("Algorithm: ",alg),
paste0("Seed: ",defined_seed),
paste0("Total simulations: ",total_simulations),
paste0("Temperatures: ",paste(temperatures,collapse=',')),
paste0("Balancing functions: ",paste(bal_f,collapse = ',')),
paste0("Total iterations: ",total_iter),
paste0("Try swaps:",iterswap),
paste0("Samples in-between swaps: ",sample_inter_swap),
paste0("Total swaps:",total_swap),"","","Confirm below"),
writeLines(c("Parameters:",paste0("Algorithm: ",alg),
paste0("Seed: ",defined_seed),
paste0("Total simulations: ",total_simulations),
paste0("Temperatures: ",paste(temperatures,collapse=',')),
paste0("Balancing functions: ",paste(bal_f,collapse = ',')),
paste0("Total iterations: ",total_iter),
paste0("Try swaps:",iterswap),
paste0("Samples in-between swaps: ",sample_inter_swap),
paste0("Total swaps:",total_swap),
paste0("File: ",file_matrix),
paste0("States to keep track: ",states_visited)))
getwd()
library(Rcpp)
library(RcppArmadillo)
Rcpp::sourceCpp("functions/testing_cpp_functions.cpp")
print_geom(0.5)
print_geom(0.5)
print_geom(0.5)
print_geom(0.5)
print_geom(0.5)
print_geom(0.5)
print_geom(0.5)
print_geom(0.000005)
print_geom(0.000005)
print_geom(0.000005)
print_geom(0.000005)
print_geom(0.000005)
print_geom(0.0000000000000005)
print_geom(0.0000000000000005)
print_geom(0.0000000000000005)
print_geom(0.0000000000000005)
print_geom(0.0000000000000005)
print_geom(0.000000000000000000000000000005)
print_geom(0.000000000000000000000000000005)
print_geom(0.000000000000000000000000000005)
print_geom(0.000000000000000000000000000005)
print_geom(0.000000000000000000000000000005)
print_geom(0.000000000000000000000000000005)
print_geom(0.000000000000000000000000000005)
print_geom(0.000000000000000000000000000005)
print_geom(0.000000000000000000000000000000000000000000000000000000000000000000000005)
print_geom(0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)
print_geom(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)
print_geom(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)
print_geom(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)
print_geom(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)
print_geom(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)
print_geom(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)
print_geom(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)
print_geom(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)
print_geom(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)
print_geom(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)
print_geom(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)
print_geom(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)
print_geom(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)
print_geom(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)
print_geom(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)
print_geom(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)
print_geom(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)
print_geom(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)
print_geom(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)
print_geom(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)
print_geom(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)
print_geom(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)
print_geom(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)
print_geom(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005)
print_geom(-1)
print_geom(-5)
print_geom(0)
