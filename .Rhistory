last <- first_last
last
current <- ip[i,c]#Current iteration
current
current==max_temp & start_rt==FALSE
start_rt
i <- 81
current <- ip[i,c]#Current iteration
current
i
i <- 81+150*9
current <- ip[i,c]#Current iteration
current
i
c
head(ip)
c <- 2
current
ip[i,c]
current <- ip[i,c]#Current iteration
current
min(which(ip$sim==9))
81+150*9
1201+81
81+(150*9)
81+(150*8)
i <- 1282
current <- ip[i,c]#Current iteration
current
i
c
150*8
i <- 1288
current <- ip[i,c]#Current iteration
current
last
i%%total_swaps==1
current <- ip[i,c]#Current iteration
current
last
current==max_temp
start_rt==FALSE
current==max_temp & start_rt==FALSE
start_rt <- TRUE
i <- 1283
current <- ip[i,c]#Current iteration
current
i <- 1289
current <- ip[i,c]#Current iteration
current
ip <- ex2[["ip"]]+1
ip <- as.data.frame(ip)
total_swaps <- floor(total_iter/iterswap)
if(nrow(ip)!=(total_sim*total_swaps+1)){print("Error with size of input")}
max_temp <- max(ip[1,])
min_temp <- min(ip[1,])
initial_ip <- ip[1,]
# current_state <- (initial_ip==max_temp) - (initial_ip==min_temp)
#
# last_visited <- (initial_ip==max_temp | initial_ip==min_temp)*initial_ip
#
# ip2 <- ip[-1,]
ip <- ip |> slice(-1)
ip$sim <- rep(1:total_sim,each=total_swaps)
ip <- ip |> select(sim,everything())
#The round trip starts with the hottest temperature
rt_count <- matrix(0,nrow = total_sim,ncol=ncol(ip)-1) # to track round trip rate
for (c in 2:ncol(ip)){#Loop for each replica
first_last <- (initial_ip[c-1]==max_temp)*max_temp + (initial_ip[c-1]==min_temp)*min_temp
start_rt <- FALSE
# last <- first_last
for(i in 1:nrow(ip)){#Loop for each iteration
if(i%%total_swaps==1){# Restart the index process for each simulation
last <- first_last
}
current <- ip[i,c]#Current iteration
if(current==max_temp & start_rt==FALSE){
start_rt <- TRUE;
last <- current;
# if(current!=last){rt_count[ip[i,1],c-1]=rt_count[ip[i,1],c-1]-0.5;}
next;
}#We start counting RT from the max temp
if(start_rt){
if(current==min_temp|current==max_temp){ #If it's one of the extreme temperatures
if(last!=current){# Se completo medio round trip
rt_count[ip[i,1],c-1]=rt_count[ip[i,1],c-1]+0.5;#añadir medio round trip
last <- current;#actualizar el current
}
}
}
}
}
rt_count
ip |> filter(V3==1|V3==4) |> select(sim,V3) |> filter(sim==9)
ip |> filter(V3==1|V3==4) |> select(sim,V3) |> filter(sim==9) |> pull(v3)
ip |> filter(V3==1|V3==4) |> select(sim,V3) |> filter(sim==9) |> pull(V3)
rt_count
ip |> filter(sim==9) |> pull(V3)
first_last
c <- 4
first_last <- (initial_ip[c-1]==max_temp)*max_temp + (initial_ip[c-1]==min_temp)*min_temp
start_rt <- FALSE
first_last
ip |> filter(sim==9)
rt_count
ip <- ex2[["ip"]]+1
ip <- as.data.frame(ip)
total_swaps <- floor(total_iter/iterswap)
if(nrow(ip)!=(total_sim*total_swaps+1)){print("Error with size of input")}
max_temp <- max(ip[1,])
min_temp <- min(ip[1,])
initial_ip <- ip[1,]
# current_state <- (initial_ip==max_temp) - (initial_ip==min_temp)
#
# last_visited <- (initial_ip==max_temp | initial_ip==min_temp)*initial_ip
#
# ip2 <- ip[-1,]
ip <- ip |> slice(-1)
ip$sim <- rep(1:total_sim,each=total_swaps)
ip <- ip |> select(sim,everything())
#The round trip starts with the hottest temperature
rt_count <- matrix(0,nrow = total_sim,ncol=ncol(ip)-1) # to track round trip rate
for (c in 2:ncol(ip)){#Loop for each replica
first_last <- (initial_ip[c-1]==max_temp)*max_temp + (initial_ip[c-1]==min_temp)*min_temp
start_rt <- FALSE
# last <- first_last
for(i in 1:nrow(ip)){#Loop for each iteration
if(i==1){# Restart the index process for each simulation
last <- first_last
}else if(ip[i,1]!=ip[i-1,1]){
last <- first_last
}
current <- ip[i,c]#Current iteration
if(current==max_temp & start_rt==FALSE){
start_rt <- TRUE;
last <- current;
# if(current!=last){rt_count[ip[i,1],c-1]=rt_count[ip[i,1],c-1]-0.5;}
next;
}#We start counting RT from the max temp
if(start_rt){
if(current==min_temp|current==max_temp){ #If it's one of the extreme temperatures
if(last!=current){# Se completo medio round trip
rt_count[ip[i,1],c-1]=rt_count[ip[i,1],c-1]+0.5;#añadir medio round trip
last <- current;#actualizar el current
}
}
}
}
}
rt_count
ip |> filter(V1==1|V1==4) |> select(sim,V1) |> filter(sim==9)
c <- 2
i <- 150*8
ip[1,]
ip[i,]
ip[i+1,]
i <- 1201
# last <- first_last
# for(i in 1:nrow(ip)){#Loop for each iteration
for(i in 1201:nrow(ip)){
if(i==1){# Restart the index process for each simulation
last <- first_last
}else if(ip[i,1]!=ip[i-1,1]){
last <- first_last
}
current <- ip[i,c]#Current iteration
if(current==max_temp & start_rt==FALSE){
start_rt <- TRUE;
last <- current;
# if(current!=last){rt_count[ip[i,1],c-1]=rt_count[ip[i,1],c-1]-0.5;}
next;
}#We start counting RT from the max temp
if(start_rt){
if(current==min_temp|current==max_temp){ #If it's one of the extreme temperatures
if(last!=current){# Se completo medio round trip
print(paste0("iteration ",i," updating ",last," to ",current));
rt_count[ip[i,1],c-1]=rt_count[ip[i,1],c-1]+0.5;#añadir medio round trip
last <- current;#actualizar el current
}
}
}
}
first_last <- (initial_ip[c-1]==max_temp)*max_temp + (initial_ip[c-1]==min_temp)*min_temp
start_rt <- FALSE
# last <- first_last
# for(i in 1:nrow(ip)){#Loop for each iteration
for(i in 1201:nrow(ip)){
if(i==1){# Restart the index process for each simulation
last <- first_last
}else if(ip[i,1]!=ip[i-1,1]){
last <- first_last
}
current <- ip[i,c]#Current iteration
if(current==max_temp & start_rt==FALSE){
start_rt <- TRUE;
last <- current;
# if(current!=last){rt_count[ip[i,1],c-1]=rt_count[ip[i,1],c-1]-0.5;}
next;
}#We start counting RT from the max temp
if(start_rt){
if(current==min_temp|current==max_temp){ #If it's one of the extreme temperatures
if(last!=current){# Se completo medio round trip
print(paste0("iteration ",i," updating ",last," to ",current));
rt_count[ip[i,1],c-1]=rt_count[ip[i,1],c-1]+0.5;#añadir medio round trip
last <- current;#actualizar el current
}
}
}
}
ip|> filter(sim==9) |> pull(V1)
1364-1201
ip[1364]
ip[1364,]
c
first_last <- (initial_ip[c-1]==max_temp)*max_temp + (initial_ip[c-1]==min_temp)*min_temp
start_rt <- FALSE
first_last
initial_ip
c-1
# last <- first_last
# for(i in 1:nrow(ip)){#Loop for each iteration
for(i in 1201:nrow(ip)){
if(i==1){# Restart the index process for each simulation
last <- first_last
}else if(ip[i,1]!=ip[i-1,1]){
last <- first_last
}
current <- ip[i,c]#Current iteration
if(current==max_temp & start_rt==FALSE){
print(paste0("Start round trip at iteration", i))
start_rt <- TRUE;
last <- current;
# if(current!=last){rt_count[ip[i,1],c-1]=rt_count[ip[i,1],c-1]-0.5;}
next;
}#We start counting RT from the max temp
if(start_rt){
if(current==min_temp|current==max_temp){ #If it's one of the extreme temperatures
if(last!=current){# Se completo medio round trip
print(paste0("iteration ",i," updating ",last," to ",current));
rt_count[ip[i,1],c-1]=rt_count[ip[i,1],c-1]+0.5;#añadir medio round trip
last <- current;#actualizar el current
}
}
}
}
# last <- first_last
# for(i in 1:nrow(ip)){#Loop for each iteration
for(i in 1201:nrow(ip)){
if(i==1){# Restart the index process for each simulation
last <- first_last
}else if(ip[i,1]!=ip[i-1,1]){
last <- first_last
}
current <- ip[i,c]#Current iteration
if(current==max_temp & start_rt==FALSE){
print(paste0("Start round trip for simulation ",ip[i,1]," at iteration", i))
start_rt <- TRUE;
last <- current;
# if(current!=last){rt_count[ip[i,1],c-1]=rt_count[ip[i,1],c-1]-0.5;}
next;
}#We start counting RT from the max temp
if(start_rt){
if(current==min_temp|current==max_temp){ #If it's one of the extreme temperatures
if(last!=current){# Se completo medio round trip
print(paste0("simulation ",ip[i,1]," iteration ",i," updating ",last," to ",current));
rt_count[ip[i,1],c-1]=rt_count[ip[i,1],c-1]+0.5;#añadir medio round trip
last <- current;#actualizar el current
}
}
}
}
ip|> filter(sim==9) |> pull(V1)
rt_count <- matrix(0,nrow = total_sim,ncol=ncol(ip)-1) # to track round trip rate
# last <- first_last
# for(i in 1:nrow(ip)){#Loop for each iteration
for(i in 1201:nrow(ip)){
if(i==1){# Restart the index process for each simulation
last <- first_last
}else if(ip[i,1]!=ip[i-1,1]){
last <- first_last
}
current <- ip[i,c]#Current iteration
if(current==max_temp & start_rt==FALSE){
print(paste0("Start round trip for simulation ",ip[i,1]," at iteration", i))
start_rt <- TRUE;
last <- current;
# if(current!=last){rt_count[ip[i,1],c-1]=rt_count[ip[i,1],c-1]-0.5;}
next;
}#We start counting RT from the max temp
if(start_rt){
if(current==min_temp|current==max_temp){ #If it's one of the extreme temperatures
if(last!=current){# Se completo medio round trip
print(paste0("simulation ",ip[i,1]," iteration ",i," updating ",last," to ",current));
rt_count[ip[i,1],c-1]=rt_count[ip[i,1],c-1]+0.5;#añadir medio round trip
last <- current;#actualizar el current
}
}
}
}
rt_count
first_last <- (initial_ip[c-1]==max_temp)*max_temp + (initial_ip[c-1]==min_temp)*min_temp
start_rt <- FALSE
# last <- first_last
# for(i in 1:nrow(ip)){#Loop for each iteration
for(i in 1201:nrow(ip)){
if(i==1){# Restart the index process for each simulation
last <- first_last
}else if(ip[i,1]!=ip[i-1,1]){
last <- first_last
}
current <- ip[i,c]#Current iteration
if(current==max_temp & start_rt==FALSE){
print(paste0("Start round trip for simulation ",ip[i,1]," at iteration", i));
start_rt <- TRUE;
last <- current;
# if(current!=last){rt_count[ip[i,1],c-1]=rt_count[ip[i,1],c-1]-0.5;}
next;
}#We start counting RT from the max temp
if(start_rt){
if(current==min_temp|current==max_temp){ #If it's one of the extreme temperatures
if(last!=current){# Se completo medio round trip
print(paste0("simulation ",ip[i,1]," iteration ",i," updating ",last," to ",current));
rt_count[ip[i,1],c-1]=rt_count[ip[i,1],c-1]+0.5;#añadir medio round trip
last <- current;#actualizar el current
}
}
}
}
# last <- first_last
# for(i in 1:nrow(ip)){#Loop for each iteration
for(i in 1201:nrow(ip)){
if(i==1){# Restart the index process for each simulation
last <- first_last
start_rt <- FALSE
}else if(ip[i,1]!=ip[i-1,1]){
last <- first_last
start_rt <- FALSE
}
current <- ip[i,c]#Current iteration
if(current==max_temp & start_rt==FALSE){
print(paste0("Start round trip for simulation ",ip[i,1]," at iteration ", i));
start_rt <- TRUE;
last <- current;
# if(current!=last){rt_count[ip[i,1],c-1]=rt_count[ip[i,1],c-1]-0.5;}
next;
}#We start counting RT from the max temp
if(start_rt){
if(current==min_temp|current==max_temp){ #If it's one of the extreme temperatures
if(last!=current){# Se completo medio round trip
print(paste0("simulation ",ip[i,1]," iteration ",i," updating ",last," to ",current));
rt_count[ip[i,1],c-1]=rt_count[ip[i,1],c-1]+0.5;#añadir medio round trip
last <- current;#actualizar el current
}
}
}
}
rt_count <- matrix(0,nrow = total_sim,ncol=ncol(ip)-1) # to track round trip rate
# last <- first_last
# for(i in 1:nrow(ip)){#Loop for each iteration
for(i in 1201:nrow(ip)){
if(i==1){# Restart the index process for each simulation
last <- first_last
start_rt <- FALSE
}else if(ip[i,1]!=ip[i-1,1]){
last <- first_last
start_rt <- FALSE
}
current <- ip[i,c]#Current iteration
if(current==max_temp & start_rt==FALSE){
print(paste0("Start round trip for simulation ",ip[i,1]," at iteration ", i));
start_rt <- TRUE;
last <- current;
# if(current!=last){rt_count[ip[i,1],c-1]=rt_count[ip[i,1],c-1]-0.5;}
next;
}#We start counting RT from the max temp
if(start_rt){
if(current==min_temp|current==max_temp){ #If it's one of the extreme temperatures
if(last!=current){# Se completo medio round trip
print(paste0("simulation ",ip[i,1]," iteration ",i," updating ",last," to ",current));
rt_count[ip[i,1],c-1]=rt_count[ip[i,1],c-1]+0.5;#añadir medio round trip
last <- current;#actualizar el current
}
}
}
}
rt_count
ip <- ex2[["ip"]]+1
ip <- as.data.frame(ip)
total_swaps <- floor(total_iter/iterswap)
if(nrow(ip)!=(total_sim*total_swaps+1)){print("Error with size of input")}
max_temp <- max(ip[1,])
min_temp <- min(ip[1,])
initial_ip <- ip[1,]
# current_state <- (initial_ip==max_temp) - (initial_ip==min_temp)
#
# last_visited <- (initial_ip==max_temp | initial_ip==min_temp)*initial_ip
#
# ip2 <- ip[-1,]
ip <- ip |> slice(-1)
ip$sim <- rep(1:total_sim,each=total_swaps)
ip <- ip |> select(sim,everything())
#The round trip starts with the hottest temperature
rt_count <- matrix(0,nrow = total_sim,ncol=ncol(ip)-1) # to track round trip rate
for (c in 2:ncol(ip)){#Loop for each replica
first_last <- (initial_ip[c-1]==max_temp)*max_temp + (initial_ip[c-1]==min_temp)*min_temp
# last <- first_last
for(i in 1:nrow(ip)){#Loop for each iteration
# for(i in 1201:nrow(ip)){
if(i==1){# Restart the index process for each simulation
last <- first_last
start_rt <- FALSE
}else if(ip[i,1]!=ip[i-1,1]){
last <- first_last
start_rt <- FALSE
}
current <- ip[i,c]#Current iteration
if(current==max_temp & start_rt==FALSE){
print(paste0("Start round trip for simulation ",ip[i,1]," at iteration ", i));
start_rt <- TRUE;
last <- current;
# if(current!=last){rt_count[ip[i,1],c-1]=rt_count[ip[i,1],c-1]-0.5;}
next;
}#We start counting RT from the max temp
if(start_rt){
if(current==min_temp|current==max_temp){ #If it's one of the extreme temperatures
if(last!=current){# Se completo medio round trip
print(paste0("simulation ",ip[i,1]," iteration ",i," updating ",last," to ",current));
rt_count[ip[i,1],c-1]=rt_count[ip[i,1],c-1]+0.5;#añadir medio round trip
last <- current;#actualizar el current
}
}
}
}
}
rt_count
ip |> filter(V1==1|V1==4) |> select(sim,V1) |> filter(sim==9)
ip|> filter(sim==9) |> pull(V1)
ip |> filter(sim==9) |> pull(V3)
rt_count
ip |> filter(V3==1|V3==4) |> select(sim,V3) |> filter(sim==9)
ip |> filter(V1==1|V1==4) |> select(sim,V1) |> filter(sim==1)
rt_count
ip |> filter(V4==1|V4==4) |> select(sim,V4) |> filter(sim==1)
#round trip rate
PT_RT(output[["ip"]], total_iter,itersap,total_simulations)
#Compute roundtrip rate
PT_RT <- function(ip,total_iter,iterswap, total_sim){
# ip <- ex2[["ip"]]+1
ip <- as.data.frame(ip)
total_swaps <- floor(total_iter/iterswap)
if(nrow(ip)!=(total_sim*total_swaps+1)){print("Error with size of input")}
max_temp <- max(ip[1,])
min_temp <- min(ip[1,])
initial_ip <- ip[1,]
# current_state <- (initial_ip==max_temp) - (initial_ip==min_temp)
#
# last_visited <- (initial_ip==max_temp | initial_ip==min_temp)*initial_ip
#
# ip2 <- ip[-1,]
ip <- ip |> slice(-1)
ip$sim <- rep(1:total_sim,each=total_swaps)
ip <- ip |> select(sim,everything())
#The round trip starts with the hottest temperature
rt_count <- matrix(0,nrow = total_sim,ncol=ncol(ip)-1) # to track round trip rate
for (c in 2:ncol(ip)){#Loop for each replica
first_last <- (initial_ip[c-1]==max_temp)*max_temp + (initial_ip[c-1]==min_temp)*min_temp
# last <- first_last
for(i in 1:nrow(ip)){#Loop for each iteration
# for(i in 1201:nrow(ip)){
if(i==1){# Restart the index process for each simulation
last <- first_last
start_rt <- FALSE
}else if(ip[i,1]!=ip[i-1,1]){
last <- first_last
start_rt <- FALSE
}
current <- ip[i,c]#Current iteration
if(current==max_temp & start_rt==FALSE){
# print(paste0("Start round trip for simulation ",ip[i,1]," at iteration ", i));
start_rt <- TRUE;
last <- current;
# if(current!=last){rt_count[ip[i,1],c-1]=rt_count[ip[i,1],c-1]-0.5;}
next;
}#We start counting RT from the max temp
if(start_rt){
if(current==min_temp|current==max_temp){ #If it's one of the extreme temperatures
if(last!=current){# Se completo medio round trip
# print(paste0("simulation ",ip[i,1]," iteration ",i," updating ",last," to ",current));
rt_count[ip[i,1],c-1]=rt_count[ip[i,1],c-1]+0.5;#añadir medio round trip
last <- current;#actualizar el current
}
}
}
}
}
ip |> filter(V4==1|V4==4) |> select(sim,V4) |> filter(sim==1)
ip |> filter(V1==1|V1==4) |> select(sim,V1) |> filter(sim==1)
ip |> filter(V2==1|V2==4) |> select(sim,V2) |> filter(sim==1)
ip |> filter(V3==1|V3==4) |> select(sim,V3) |> filter(sim==1)
ip |> filter(V3==1|V3==4) |> select(sim,V3) |> filter(sim==9)
ip |> filter(V1==1|V1==4) |> select(sim,V1) |> filter(sim==9)
ip|> filter(sim==9) |> pull(V1)
ip |> filter(sim==9) |> pull(V3)
return(rt_count);
}
#round trip rate
PT_RT(output[["ip"]], total_iter,itersap,total_simulations)
output <- ex2
#round trip rate
PT_RT(output[["ip"]], total_iter,itersap,total_simulations)
#round trip rate
PT_RT(output[["ip"]], total_iter,iterswap,total_simulations)
