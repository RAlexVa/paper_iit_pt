if(alg=="PT_A_IIT"){
# Using A-IIT with multiplicity list in each replica
#temperature_PT_a_IIT(int p,int interswap, double temp_ini, const std::string bal_function, const double& theta)
output_list <- temperature_PT_a_IIT(p,interswap,temp_ini,bal_f,theta)
output <- output_list["temp"];
write.table(output_list["iter"], file = paste0("results/temperatures_id_ ",id_chosen,"_alg_",alg,"_iterations_",t,".txt"),
row.names = FALSE, col.names = FALSE)
}
if(t==1){
write(paste0("alg: ",alg,"\ntemp_ini: ",temp_ini,"\ntemp ",t+1,": ",output), file = paste0("results/temperatures_id_ ",id_chosen,"_alg_",alg,".txt"), append = FALSE)
}else{
write(paste0("temp ",t+1,": ",output), file = paste0("results/temperatures_id_ ",id_chosen,"_alg_",alg,".txt"), append = TRUE)
}
temp_ini <- output;
} ## End for loop for the temperatures
}## End of the for loop that runs over IDS
}## End of function
if (!interactive()) {
args <- commandArgs(trailingOnly = TRUE)
find_temps(args[1])
}
find_temps(2)
id_chosen <- 2
list_ids <- as.numeric(unlist(strsplit(list_ids,",")))
Rcpp::sourceCpp("functions/find_temp_func.cpp")# Source CPP functions
##### Read file for parameters #####
parameters <- as.data.frame(read_csv("results/find_temps.csv", col_types = cols()))
sim_chosen <- parameters |> filter(id==id_chosen)
if(nrow(sim_chosen)!=1){print(paste0("Error: id ",id_chosen," doesn't exist or there's more than one")); next;}
# Parameters for all algorithms
alg <- sim_chosen$algorithm # algorithm
interswap <- sim_chosen$interswap #Total iterations before trying a replica swap
defined_seed <- sim_chosen$seed
set.seed(defined_seed)
p <- as.numeric(sim_chosen$p)
theta <- as.numeric(sim_chosen$theta)
bal_f <- as.character(sim_chosen$bf)
model <- as.character(sim_chosen$model)
temp_ini <- as.numeric(sim_chosen$t1)
number_temperatures <- as.numeric(sim_chosen$num_temp)
export <- list();
#### Function depending on algorithm to use
#temperature_PT_IIT(int p,int interswap, double temp_ini, const std::string bal_function, const double& theta)
writeLines(c("Parameters:",
paste0("ID: ",id_chosen),
paste0("Algorithm: ",alg),
paste0("Problem: ",model),
paste0("Dimension: ",p),
paste0("Theta: ",theta),
paste0("Samples in-between swaps: ",interswap),
paste0("Initial temperature: ",temp_ini),
paste0("#Temperatures to find: ",number_temperatures),
paste0("Balancing function: ",bal_f)))
# Using A-IIT with multiplicity list in each replica
#temperature_PT_a_IIT(int p,int interswap, double temp_ini, const std::string bal_function, const double& theta)
output_list <- temperature_PT_a_IIT(p,interswap,temp_ini,bal_f,theta)
output <- output_list["temp"];
write.table(output_list["iter"], file = paste0("results/temperatures_id_ ",id_chosen,"_alg_",alg,"_iterations_",t,".txt"),
row.names = FALSE, col.names = FALSE)
paste0("results/temperatures_id_ ",id_chosen,"_alg_",alg,"_iterations_",t,".txt")
id_chosen
alg
t
t_counter <- 1
write.table(output_list["iter"], file = paste0("results/temperatures_id_ ",id_chosen,"_alg_",alg,"_iterations_",t_counter,".txt"),
row.names = FALSE, col.names = FALSE)
rm(list=ls())
library(Rcpp)
library(RcppArmadillo)
library(dplyr, warn.conflicts = F)
library(readr)
find_temps <- function(list_ids){
if(!("./results" %in% list.dirs(recursive=F))){## If there's no folder for exports
stop("Wrong directory. There's no results folder for the output")
}
if(missing(list_ids)){## If parameters are not provided
#### Prompt to choose which simulation to run
writeLines("You can write various IDs separated by commas")
list_ids <- readline('Choose id:')
}
if(!is.character(list_ids)){ list_ids <- as.character(list_ids)}
list_ids <- as.numeric(unlist(strsplit(list_ids,",")))
Rcpp::sourceCpp("functions/find_temp_func.cpp")# Source CPP functions
##### Read file for parameters #####
parameters <- as.data.frame(read_csv("results/find_temps.csv", col_types = cols()))
##### Start process for algorithms
for(id_chosen in list_ids){
sim_chosen <- parameters |> filter(id==id_chosen)
if(nrow(sim_chosen)!=1){print(paste0("Error: id ",id_chosen," doesn't exist or there's more than one")); next;}
# Parameters for all algorithms
alg <- sim_chosen$algorithm # algorithm
interswap <- sim_chosen$interswap #Total iterations before trying a replica swap
defined_seed <- sim_chosen$seed
set.seed(defined_seed)
p <- as.numeric(sim_chosen$p)
theta <- as.numeric(sim_chosen$theta)
bal_f <- as.character(sim_chosen$bf)
model <- as.character(sim_chosen$model)
temp_ini <- as.numeric(sim_chosen$t1)
number_temperatures <- as.numeric(sim_chosen$num_temp)
#### Function depending on algorithm to use
#temperature_PT_IIT(int p,int interswap, double temp_ini, const std::string bal_function, const double& theta)
writeLines(c("Parameters:",
paste0("ID: ",id_chosen),
paste0("Algorithm: ",alg),
paste0("Problem: ",model),
paste0("Dimension: ",p),
paste0("Theta: ",theta),
paste0("Samples in-between swaps: ",interswap),
paste0("Initial temperature: ",temp_ini),
paste0("#Temperatures to find: ",number_temperatures),
paste0("Balancing function: ",bal_f)))
for(t_counter in 1:number_temperatures){
if(alg=="PT_IIT_Z"){
# Using Z factor bias correction
#temperature_PT_IIT(int p,int interswap, double temp_ini, const std::string bal_function, const double& theta)
output <- temperature_PT_IIT(p,interswap,temp_ini,bal_f, theta)
}
if(alg=="PT_A_IIT"){
# Using A-IIT with multiplicity list in each replica
#temperature_PT_a_IIT(int p,int interswap, double temp_ini, const std::string bal_function, const double& theta)
output_list <- temperature_PT_a_IIT(p,interswap,temp_ini,bal_f,theta)
output <- output_list["temp"];
write.table(output_list["iter"], file = paste0("results/temperatures_id_ ",id_chosen,"_alg_",alg,"_iterations_",t_counter,".txt"),
row.names = FALSE, col.names = FALSE)
}
if(t_counter==1){
write(paste0("alg: ",alg,"\ntemp_ini: ",temp_ini,"\ntemp ",t_counter+1,": ",output), file = paste0("results/temperatures_id_ ",id_chosen,"_alg_",alg,".txt"), append = FALSE)
}else{
write(paste0("temp ",t_counter+1,": ",output), file = paste0("results/temperatures_id_ ",id_chosen,"_alg_",alg,".txt"), append = TRUE)
}
temp_ini <- output;
} ## End for loop for the temperatures
}## End of the for loop that runs over IDS
}## End of function
if (!interactive()) {
args <- commandArgs(trailingOnly = TRUE)
find_temps(args[1])
}
find_temps(2)
id_chosen <- 2
list_ids <- as.numeric(unlist(strsplit(list_ids,",")))
Rcpp::sourceCpp("functions/find_temp_func.cpp")# Source CPP functions
##### Read file for parameters #####
parameters <- as.data.frame(read_csv("results/find_temps.csv", col_types = cols()))
sim_chosen <- parameters |> filter(id==id_chosen)
if(nrow(sim_chosen)!=1){print(paste0("Error: id ",id_chosen," doesn't exist or there's more than one")); next;}
# Parameters for all algorithms
alg <- sim_chosen$algorithm # algorithm
interswap <- sim_chosen$interswap #Total iterations before trying a replica swap
defined_seed <- sim_chosen$seed
set.seed(defined_seed)
p <- as.numeric(sim_chosen$p)
theta <- as.numeric(sim_chosen$theta)
bal_f <- as.character(sim_chosen$bf)
model <- as.character(sim_chosen$model)
temp_ini <- as.numeric(sim_chosen$t1)
number_temperatures <- as.numeric(sim_chosen$num_temp)
#### Function depending on algorithm to use
#temperature_PT_IIT(int p,int interswap, double temp_ini, const std::string bal_function, const double& theta)
writeLines(c("Parameters:",
paste0("ID: ",id_chosen),
paste0("Algorithm: ",alg),
paste0("Problem: ",model),
paste0("Dimension: ",p),
paste0("Theta: ",theta),
paste0("Samples in-between swaps: ",interswap),
paste0("Initial temperature: ",temp_ini),
paste0("#Temperatures to find: ",number_temperatures),
paste0("Balancing function: ",bal_f)))
alg=="PT_A_IIT"
# Using A-IIT with multiplicity list in each replica
#temperature_PT_a_IIT(int p,int interswap, double temp_ini, const std::string bal_function, const double& theta)
output_list <- temperature_PT_a_IIT(p,interswap,temp_ini,bal_f,theta)
output <- output_list["temp"];
write.table(output_list["iter"], file = paste0("results/temperatures_id_ ",id_chosen,"_alg_",alg,"_iterations_",t_counter,".txt"),
row.names = FALSE, col.names = FALSE)
t_counter <- 1
write.table(output_list["iter"], file = paste0("results/temperatures_id_ ",id_chosen,"_alg_",alg,"_iterations_",t_counter,".txt"),
row.names = FALSE, col.names = FALSE)
if(t_counter==1){
write(paste0("alg: ",alg,"\ntemp_ini: ",temp_ini,"\ntemp ",t_counter+1,": ",output), file = paste0("results/temperatures_id_ ",id_chosen,"_alg_",alg,".txt"), append = FALSE)
}else{
write(paste0("temp ",t_counter+1,": ",output), file = paste0("results/temperatures_id_ ",id_chosen,"_alg_",alg,".txt"), append = TRUE)
}
temp_ini <- output;
t_counter <- 2
number_temperatures
if(alg=="PT_A_IIT"){
# Using A-IIT with multiplicity list in each replica
#temperature_PT_a_IIT(int p,int interswap, double temp_ini, const std::string bal_function, const double& theta)
output_list <- temperature_PT_a_IIT(p,interswap,temp_ini,bal_f,theta)
output <- output_list["temp"];
write.table(output_list["iter"], file = paste0("results/temperatures_id_ ",id_chosen,"_alg_",alg,"_iterations_",t_counter,".txt"),
row.names = FALSE, col.names = FALSE)
}
# Using A-IIT with multiplicity list in each replica
#temperature_PT_a_IIT(int p,int interswap, double temp_ini, const std::string bal_function, const double& theta)
output_list <- temperature_PT_a_IIT(p,interswap,temp_ini,bal_f,theta)
class(output)
output
output_list
output_list["temp"]
output <- output_list[["temp"]];
output
class(output)
rm(list=ls())
library(Rcpp)
library(RcppArmadillo)
library(dplyr, warn.conflicts = F)
library(readr)
find_temps <- function(list_ids){
if(!("./results" %in% list.dirs(recursive=F))){## If there's no folder for exports
stop("Wrong directory. There's no results folder for the output")
}
if(missing(list_ids)){## If parameters are not provided
#### Prompt to choose which simulation to run
writeLines("You can write various IDs separated by commas")
list_ids <- readline('Choose id:')
}
if(!is.character(list_ids)){ list_ids <- as.character(list_ids)}
list_ids <- as.numeric(unlist(strsplit(list_ids,",")))
Rcpp::sourceCpp("functions/find_temp_func.cpp")# Source CPP functions
##### Read file for parameters #####
parameters <- as.data.frame(read_csv("results/find_temps.csv", col_types = cols()))
##### Start process for algorithms
for(id_chosen in list_ids){
sim_chosen <- parameters |> filter(id==id_chosen)
if(nrow(sim_chosen)!=1){print(paste0("Error: id ",id_chosen," doesn't exist or there's more than one")); next;}
# Parameters for all algorithms
alg <- sim_chosen$algorithm # algorithm
interswap <- sim_chosen$interswap #Total iterations before trying a replica swap
defined_seed <- sim_chosen$seed
set.seed(defined_seed)
p <- as.numeric(sim_chosen$p)
theta <- as.numeric(sim_chosen$theta)
bal_f <- as.character(sim_chosen$bf)
model <- as.character(sim_chosen$model)
temp_ini <- as.numeric(sim_chosen$t1)
number_temperatures <- as.numeric(sim_chosen$num_temp)
#### Function depending on algorithm to use
#temperature_PT_IIT(int p,int interswap, double temp_ini, const std::string bal_function, const double& theta)
writeLines(c("Parameters:",
paste0("ID: ",id_chosen),
paste0("Algorithm: ",alg),
paste0("Problem: ",model),
paste0("Dimension: ",p),
paste0("Theta: ",theta),
paste0("Samples in-between swaps: ",interswap),
paste0("Initial temperature: ",temp_ini),
paste0("#Temperatures to find: ",number_temperatures),
paste0("Balancing function: ",bal_f)))
for(t_counter in 1:number_temperatures){
if(alg=="PT_IIT_Z"){
# Using Z factor bias correction
#temperature_PT_IIT(int p,int interswap, double temp_ini, const std::string bal_function, const double& theta)
output <- temperature_PT_IIT(p,interswap,temp_ini,bal_f, theta)
}
if(alg=="PT_A_IIT"){
# Using A-IIT with multiplicity list in each replica
#temperature_PT_a_IIT(int p,int interswap, double temp_ini, const std::string bal_function, const double& theta)
output_list <- temperature_PT_a_IIT(p,interswap,temp_ini,bal_f,theta)
output <- output_list[["temp"]];
write.table(output_list["iter"], file = paste0("results/temperatures_id_ ",id_chosen,"_alg_",alg,"_iterations_",t_counter,".txt"),
row.names = FALSE, col.names = FALSE)
}
if(t_counter==1){
write(paste0("alg: ",alg,"\ntemp_ini: ",temp_ini,"\ntemp ",t_counter+1,": ",output), file = paste0("results/temperatures_id_ ",id_chosen,"_alg_",alg,".txt"), append = FALSE)
}else{
write(paste0("temp ",t_counter+1,": ",output), file = paste0("results/temperatures_id_ ",id_chosen,"_alg_",alg,".txt"), append = TRUE)
}
temp_ini <- output;
} ## End for loop for the temperatures
}## End of the for loop that runs over IDS
}## End of function
if (!interactive()) {
args <- commandArgs(trailingOnly = TRUE)
find_temps(args[1])
}
find_temps(2)
rm(list=ls())
library(Rcpp)
library(RcppArmadillo)
library(dplyr, warn.conflicts = F)
library(readr)
find_temps <- function(list_ids){
if(!("./results" %in% list.dirs(recursive=F))){## If there's no folder for exports
stop("Wrong directory. There's no results folder for the output")
}
if(missing(list_ids)){## If parameters are not provided
#### Prompt to choose which simulation to run
writeLines("You can write various IDs separated by commas")
list_ids <- readline('Choose id:')
}
if(!is.character(list_ids)){ list_ids <- as.character(list_ids)}
list_ids <- as.numeric(unlist(strsplit(list_ids,",")))
Rcpp::sourceCpp("functions/find_temp_func.cpp")# Source CPP functions
##### Read file for parameters #####
parameters <- as.data.frame(read_csv("results/find_temps.csv", col_types = cols()))
##### Start process for algorithms
for(id_chosen in list_ids){
sim_chosen <- parameters |> filter(id==id_chosen)
if(nrow(sim_chosen)!=1){print(paste0("Error: id ",id_chosen," doesn't exist or there's more than one")); next;}
# Parameters for all algorithms
alg <- sim_chosen$algorithm # algorithm
interswap <- sim_chosen$interswap #Total iterations before trying a replica swap
defined_seed <- sim_chosen$seed
set.seed(defined_seed)
p <- as.numeric(sim_chosen$p)
theta <- as.numeric(sim_chosen$theta)
bal_f <- as.character(sim_chosen$bf)
model <- as.character(sim_chosen$model)
temp_ini <- as.numeric(sim_chosen$t1)
number_temperatures <- as.numeric(sim_chosen$num_temp)
#### Function depending on algorithm to use
#temperature_PT_IIT(int p,int interswap, double temp_ini, const std::string bal_function, const double& theta)
writeLines(c("Parameters:",
paste0("ID: ",id_chosen),
paste0("Algorithm: ",alg),
paste0("Problem: ",model),
paste0("Dimension: ",p),
paste0("Theta: ",theta),
paste0("Samples in-between swaps: ",interswap),
paste0("Initial temperature: ",temp_ini),
paste0("#Temperatures to find: ",number_temperatures),
paste0("Balancing function: ",bal_f)))
for(t_counter in 1:number_temperatures){
if(alg=="PT_IIT_Z"){
# Using Z factor bias correction
#temperature_PT_IIT(int p,int interswap, double temp_ini, const std::string bal_function, const double& theta)
output <- temperature_PT_IIT(p,interswap,temp_ini,bal_f, theta)
}
if(alg=="PT_A_IIT"){
# Using A-IIT with multiplicity list in each replica
#temperature_PT_a_IIT(int p,int interswap, double temp_ini, const std::string bal_function, const double& theta)
output_list <- temperature_PT_a_IIT(p,interswap,temp_ini,bal_f,theta)
output <- output_list[["temp"]];
write.table(output_list["iter"], file = paste0("results/temperatures_id_ ",id_chosen,"_alg_",alg,"_iterations_",t_counter,".txt"),
row.names = FALSE, col.names = FALSE)
}
if(t_counter==1){
write(paste0("alg: ",alg,"\ntemp_ini: ",temp_ini,"\ntemp ",t_counter+1,": ",output), file = paste0("results/temperatures_id_",id_chosen,"_alg_",alg,".txt"), append = FALSE)
}else{
write(paste0("temp ",t_counter+1,": ",output), file = paste0("results/temperatures_id_",id_chosen,"_alg_",alg,".txt"), append = TRUE)
}
temp_ini <- output;
} ## End for loop for the temperatures
}## End of the for loop that runs over IDS
}## End of function
if (!interactive()) {
args <- commandArgs(trailingOnly = TRUE)
find_temps(args[1])
}
find_temps(1)
1/(1+exp(-2.6))
1/(1+exp(-3))
id_chosen
id_chosen <- 1
paste0("results/temperatures_id_",id_chosen,".txt")
paste0("results/temperatures_id_",id_chosen,".txt")
install.packages("OpenMPController")
devtools::install_github("tesujimath/R-OpenMPController")
install.packages("devtools")
devtools::install_github("tesujimath/R-OpenMPController")
# Then test with parallel
library(OpenMPController)
omp_set_num_threads(4)  # Use 4 threads
asd <- IIT_update_w_parallel(X,Q_matrix,chosen_bf,temperature,theta,seed)
#### Comparing Parallelization of IIT_update ###
Rcpp::sourceCpp("functions_other/testing_cpp_functions.cpp")
p <- 2000
Q_matrix <- matrix(0,nrow=p,ncol=2)
for(i in 1:p){
if(i%%2==0){Q_matrix[i,2]=1}
if(i%%2==1){Q_matrix[i,1]=1}
}
chosen_bf <- "sq"
temperature <- 1
theta <- 3
seed <- 625
X <- rbinom(p,1,0.5)
# Then test with parallel
library(OpenMPController)
omp_set_num_threads(4)  # Use 4 threads
asd <- IIT_update_w_parallel(X,Q_matrix,chosen_bf,temperature,theta,seed)
#### Comparing Parallelization of IIT_update ###
Rcpp::sourceCpp("functions_other/testing_cpp_functions.cpp")
p <- 2000
Q_matrix <- matrix(0,nrow=p,ncol=2)
for(i in 1:p){
if(i%%2==0){Q_matrix[i,2]=1}
if(i%%2==1){Q_matrix[i,1]=1}
}
chosen_bf <- "sq"
temperature <- 1
theta <- 3
seed <- 625
X <- rbinom(p,1,0.5)
IIT_update_w(X,Q_matrix,chosen_bf,temperature,theta,seed)
# Then test with parallel
library(OpenMPController)
omp_set_num_threads(4)  # Use 4 threads
asd <- IIT_update_w_parallel(X,Q_matrix,chosen_bf,temperature,theta,seed)
omp_set_num_threads(12)  # Use 4 threads
asd <- IIT_update_w_parallel(X,Q_matrix,chosen_bf,temperature,theta,seed)
######### Test for each parallel ############
rm(list=ls())
library(Rcpp)
library(RcppArmadillo)
Rcpp::sourceCpp("functions_other/test_parallel.cpp")
######### Test for each parallel ############
rm(list=ls())
library(Rcpp)
library(RcppArmadillo)
Rcpp::sourceCpp("functions_other/test_parallel.cpp")
######### Test for each parallel ############
rm(list=ls())
library(Rcpp)
library(RcppArmadillo)
Rcpp::sourceCpp("functions_other/test_parallel.cpp")
Rcpp::sourceCpp("functions_other/test_parallel.cpp")
Rcpp::sourceCpp("functions_other/test_parallel.cpp")
######### Test for each parallel ############
rm(list=ls())
library(Rcpp)
library(RcppArmadillo)
Rcpp::sourceCpp("functions_other/test_parallel.cpp")
rm(list=ls())
library(Rcpp)
library(RcppArmadillo)
Rcpp::sourceCpp("functions_other/test_parallel.cpp")
~/
~
asd
######### Test for each parallel ############
rm(list=ls())
######### Test for each parallel ############
rm(list=ls())
library(Rcpp)
library(RcppArmadillo)
Sys.setenv("PKG_CXXFLAGS" = "-std=c++17")
Rcpp::sourceCpp("functions_other/test_parallel.cpp")
rm(list=ls())
library(Rcpp)
library(RcppArmadillo)
Sys.setenv("PKG_CXXFLAGS" = "-std=c++17")
Rcpp::sourceCpp("functions_other/test_parallel.cpp", verbose = TRUE)
rm(list=ls())
library(Rcpp)
library(RcppArmadillo)
Sys.setenv("PKG_CXXFLAGS" = "-std=c++17")
Rcpp::sourceCpp("functions_other/test_parallel.cpp", verbose = TRUE)
######### Test for each parallel ############
rm(list=ls())
library(Rcpp)
library(RcppArmadillo)
Rcpp::sourceCpp("functions/find_temp_func.cpp", verbose = TRUE)
rm(list=ls())
library(Rcpp)
library(RcppArmadillo)
# Sys.setenv("PKG_CXXFLAGS" = "-std=c++17")
Rcpp::sourceCpp("functions_other/test_parallel.cpp", verbose = TRUE)
p <- 16
iter <- 50
temp <- c(1,0.5)
theta <- 3
seeed <- 123
set.seed(5)
X <- run_sim(p,iter,temp,"sq",theta,seeed)
set.seed(6)
X2 <- run_sim(p,iter,temp,"sq",theta,seeed)
X <- run_sim(p,iter,temp,"sq",theta,seeed)
set.seed(6)
X2 <- run_sim(p,iter,temp,"sq",theta,seeed)
set.seed(5)
X <- run_sim(p,iter,temp,"sq",theta,seeed)
set.seed(6)
X <- run_sim(p,iter,temp,"sq",theta,seeed)
set.seed(5)
X <- run_sim(p,iter,temp,"sq",theta,seeed)
set.seed(6)
X <- run_sim(p,iter,temp,"sq",theta,seeed)
######### Test for each parallel ############
rm(list=ls())
library(Rcpp)
library(RcppArmadillo)
Sys.setenv("PKG_CXXFLAGS" = "-std=c++17 -DHAS_PARALLEL")
Sys.setenv("CXX_STD" = "CXX17")
Rcpp::sourceCpp("functions_other/test_parallel.cpp", verbose = TRUE)
rm(list=ls())
library(Rcpp)
library(RcppArmadillo)
Rcpp::sourceCpp("functions_other/test_parallel.cpp", verbose = TRUE)
######### Test for each parallel ############
rm(list=ls())
library(Rcpp)
library(RcppArmadillo)
Rcpp::sourceCpp("functions_other/test_parallel.cpp", verbose = TRUE)
# run_sim(int p, const int iter,const vec temp,const std::string bal_function,
#         double theta=3,int seed=5)
p <- 16
iter <- 50
temp <- c(1,0.5)
theta <- 3
seeed <- 123
set.seed(5)
X <- run_sim(p,iter,temp,"sq",theta,seeed)
set.seed(6)
X2 <- run_sim(p,iter,temp,"sq",theta,seeed)
identical(X,X2)
X
X2
