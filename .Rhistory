temp_M$mode <- chosen_mode
temp_M$sim <- (1:tot_sim)
temp_M <- temp_M |> pivot_longer(-(alg:sim),names_to="temperature",values_to = "max_dist")
# head(temp_M)
temp_join <- left_join(temp_m,temp_M,by=c("alg","sim","mode","temperature"))
#### Extract iterations to find those distances
num_temp <- length(temperatures)
iters <- as.data.frame(matrix(,ncol=num_temp+2,nrow=tot_sim*2))
for(s in 1:tot_sim){
index_min <- 2*s - 1 #on odd entries
index_max <- 2*s #On even entries
iters[index_min:index_max,1] <- s#Identify simulation
iters[index_min,2] <- "min_iter"#Identify simulation
iters[index_max,2] <- "max_iter"#Identify simulation
iters[index_min,-(1:2)] <- apply(data[[output_name]][,,s],2,which.min)
iters[index_max,-(1:2)] <- apply(data[[output_name]][,,s],2,which.max)
}
colnames(iters) <- c("sim","measure",temperatures)
iters$alg <- algorithm
iters$mode <- chosen_mode
iters <- iters |>
select(alg,measure,mode,sim,everything()) |>
pivot_longer(-(alg:sim),names_to="temperature",values_to = "iter")
iters <- iters |>
pivot_wider(id_cols = c(alg,sim,temperature,mode),names_from = measure,values_from = iter)
temp_join <- left_join(temp_join,iters,by=c("alg","sim","temperature","mode")) |>
select(alg,sim, temperature,mode,min_dist,max_dist,min_iter,max_iter)
distances <- rbind(distances,temp_join)
#Find the row index of the first minimum value for each column (temperature)
# for (s in 1:tot_sim){
#   for(t in 1:length(temperatures)){
#     # Distance mode has rows=iterations, columns=replicas, slices=simulations
#     temp_tibble1 <- tibble(dist=data[["distance_mode1"]][,t,s],
#                           alg=algorithm,
#                           sim=s,
#                           temperature=temperatures[t],
#                           iteration=1:length(dist),
#                           mode="m1")
#     temp_tibble2 <- tibble(dist=data[["distance_mode2"]][,t,s],
#                           alg=algorithm,
#                           sim=s,
#                           temperature=temperatures[t],
#                           iteration=1:length(dist),
#                           mode="m2")
#     temp_tibble0 <- tibble(dist=data[["distance_origin"]][,t,s],
#                           alg=algorithm,
#                           sim=s,
#                           temperature=temperatures[t],
#                           iteration=1:length(dist),
#                           mode="m0")
#
#
#     distances <- rbind(distances,temp_tibble1,temp_tibble2,temp_tibble0)
#     rm(list=c("temp","temp_tibble1","temp_tibble2","temp_tibble0"))
#   }
# }
}
if(!is_empty(data[["round_trips"]]) && ncol(data[["round_trips"]])>1){
#Extract number of round trips rate
temp <- as.data.frame(data[["round_trips"]])
colnames(temp) <- 1:ncol(temp)
temp$sim <- 1:tot_sim
temp$alg <- algorithm
temp <- temp |> select(alg,sim,everything())
round_trip <- rbind(round_trip,temp)
# Extract replica swap rate
temp <- as.data.frame(data[["swap_rate"]])
colnames(temp) <- 1:ncol(temp)
temp$sim <- 1:tot_sim
temp$alg <- algorithm
temp <- temp |> select(alg,sim,everything())
swap_rate <- rbind(swap_rate,temp)
}
if(!is_empty(data[["total_iter"]])&& ncol(data[["total_iter"]])>1){
# Extract total iterations
dims<- dim(data[["total_iter"]])
full_iter[[k]] <- data[["total_iter"]]
full_iter_names[k] <- algorithm
k <- k+1;
temp <- as.data.frame(t(colSums(data[["total_iter"]])))/dims[1]
#temp is the average number of Rejection Free steps before trying a swap
colnames(temp) <- 1:ncol(temp)
temp$sim <- 1:tot_sim
temp$alg <- algorithm
temp <- temp |> select(alg,sim,everything())
iterations <- rbind(iterations,temp)
}
}
##### Delete first row with NA#####
# round_trip <- round_trip |> filter(!is.na(alg))
# if(exists("swap_rate")){swap_rate <- swap_rate |> filter(!is.na(alg))}
# iterations <- iterations |> filter(!is.na(alg))
# time_taken <- time_taken |> filter(!is.na(alg))
##### Export plots and tables #####
export_path <- paste0("C:/Users/ralex/Documents/src/paper_iit_pt/images/",chosen_dim,"_ex")
export_file_name <- paste0(paste0(chosen_ids,collapse="_"),"_",chosen_dim)
if(print_bimodal){export_file_name <- "bimodal"}
if(print_multimodal){export_file_name <- "multimodal"}
# full_path <- file.path(export_path,paste0("tvd_",export_file_name,".jpg"))
distances |>
group_by(alg,temperature,mode) |>
summarise(min_d=min(min_dist),
min_average=mean(min_dist),
fastest_min=min(min_iter),
mean_min=mean(min_iter),
slowest_min=max(min_iter))
head(distances)
unique(distances$mode)
rm(list=ls())
# Import libraries
library(stringr)
library(tidyverse)
library(gridExtra)# For tables
library(latex2exp) #For using latex
library(survminer); library(survival) #For plot showing how fast each replica visits all modes
# current_theme <- theme_get()
theme_set(theme_minimal());
theme_update(base_size = 17,legend.key.size = unit(1, 'cm'));
### Process simulation results ###
# Choose dimension
chosen_dim <- "highdim"; file_dim <- "highd"
# chosen_dim <- "lowdim";file_dim <- "lowd" #,10000,1000,5000
print_bimodal <- FALSE
print_multimodal <- FALSE
chosen_ids <-126:129#223:227#c(900,902,903,905)#c(126:129)
# chosen_ids <-c(130,132,134,136,138,142,143,144)#c(129,131,133,135,137,139,140,141)>
#### Chosen for lowdim bimodal problem ####
#We stay with 3 temperatures for everything
#For PT-IIT the last temperature does not achieve the 0.23 swap rate (it gets bigger rate)
#For PT A-IITm there doesn't seem to be a big issue
#For PT A-IITw it seems to have been better with 4 temperatures
# but still doesn't get the needed swap rate
# chosen_bimodal <- c(129,135,137,139)
# print_bimodal <- TRUE
# chosen_ids <- chosen_bimodal
#### Chosen for lowdim multimodal problem ####
# For PT-IIT and PT A-IITw we only use 3 temperatures because it had the best performance in TVD
# For PT A-IITm we still have to identify the best temperature
#
# chosen_multimodal <- c(165,167,169,190)
# print_multimodal <- TRUE
# chosen_ids <- chosen_multimodal
#List of files
parameters <- read_csv(paste0("results/simulation_details_",file_dim,".csv"), col_types = cols())
#Create table with available files
data_sum <- tibble(file_names=list.files(path = "results", pattern = "^sim_.*\\.Rds")) |>
mutate(id=as.numeric(str_extract(file_names, "(?<=id_)[0-9]+(?=\\.Rds)")),
dim=str_extract(file_names, "(?<=sim_)[^_]+(?=_id)")) |>
filter(dim==chosen_dim) |>
left_join(parameters, by="id")
# filter IDs to compare
data_sum <- data_sum |> filter(id %in% chosen_ids)
if(chosen_dim=="lowdim"){
Rcpp::sourceCpp("functions/cpp_functions.cpp") #To use vec_to_num function
source("functions/r_functions.R")
check_number_modes <- unique(data_sum |> pull(model))
if(length(check_number_modes)==1){only_1_model <- TRUE;}else{only_1_model <- FALSE}
if(!only_1_model){stop("You have low_dim models with different number of modes")}else{
# Check number of replicas
check_number_replicas <- data_sum |> select(id,matches("^t\\d+")) #Select all temperatures columns
#Check which columns are full of NAs to exclude them
na_temps <- data_sum |>
select(matches("^t\\d+$")) |>  # Select columns of the form tX
summarize(across(everything(), ~ all(is.na(.x)))) |>   # Check if all values are NA
pivot_longer(everything(), names_to = "column", values_to = "is_all_na") |>   # Convert to long format
filter(is_all_na) |>   # Keep only columns where is_all_na is TRUE
pull(column)
na_bf <- paste0("bf",na_temps |> str_extract("\\d+"))
check_number_replicas <- check_number_replicas|> select(-all_of(na_temps))
check_dif_num_replica <- any(is.na(check_number_replicas))
if(check_dif_num_replica){#In case there's some ids with different number of replicas
ind_rep <- which(is.na(check_number_replicas),T)[1]
writeLines(paste0("id: ",check_number_replicas[ind_rep,1]," has less replicas"))
stop("Some of the chosen simulations have different number of replicas")
}else{
num_replicas <- ncol(check_number_replicas |> select(-id))
}
# to store time to visit modes
mode_time <- as.data.frame(matrix(nrow=0,ncol=4)); colnames(mode_time) <- c("alg","sim","mode","time")
# to store time to visit modes
tvd_report <- as.data.frame(matrix(nrow=0,ncol=5));colnames(tvd_report) <- c("alg","sim","measurement","time","tvd")
if(check_number_modes=="7_mode"){
#Low dim is the example with 7 modes and 4 temperatures
tvd <- data.frame(alg=character(),sim=numeric(),tvd=numeric())
mode_visit <- as.data.frame(matrix(nrow=0,ncol=10)); colnames(mode_visit) <- c("alg","sim","interswap",1:7)
round_trip <- as.data.frame(matrix(nrow=0,ncol=(num_replicas+2))); colnames(round_trip) <- c("alg","sim",1:num_replicas)
swap_rate <- as.data.frame(matrix(nrow=0,ncol=(num_replicas+1))); colnames(swap_rate) <- c("alg","sim",1:(num_replicas-1))
iterations <- as.data.frame(matrix(nrow=0,ncol=(num_replicas+2))); colnames(iterations) <- c("alg","sim",1:num_replicas) #For the 4 replicas
pi_modes <- as.data.frame(matrix(nrow=0,ncol=9));colnames(pi_modes) <- c("alg","sim",1:7)
# Low dimensional true probability setup
{
Rcpp::sourceCpp("functions/cpp_functions.cpp") #To use vec_to_num function
source("functions/r_functions.R")
p <- 16 #dimension
theta <- 15 #tail weight parameter
# Modes definition
mod1 <- c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)#rep(1,p)
mod2 <- c(1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0)
mod3 <- c(0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1)
mod4 <- c(1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0)
mod5 <- c(0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1)
mod6 <- c(1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1)
mod7 <- c(0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0)
modes <- c(vec_to_num(mod1),  vec_to_num(mod2),  vec_to_num(mod3),  vec_to_num(mod4),  vec_to_num(mod5),  vec_to_num(mod6),  vec_to_num(mod7))
modes_list <- list(mod1,mod2,mod3,mod4,mod5,mod6,mod7)
### Compute true probability
pi.true <- rep(0,2^p)
for(i in 0:(2^p -1)){
pi.true[i+1] <-  lik_comp(NumberToVector(i,p),modes_list,theta,p)
}
pi.true <- pi.true/(length(modes_list)*(1+exp(-theta))^p)
}
}
if(check_number_modes=="bimodal"){
#Low dim is the example with 2 modes and 4 temperatures
tvd <- data.frame(alg=character(),sim=numeric(),tvd=numeric())
mode_visit <- as.data.frame(matrix(nrow=0,ncol=5)); colnames(mode_visit) <- c("alg","sim","interswap",1:2)
round_trip <- as.data.frame(matrix(nrow=0,ncol=(num_replicas+2))); colnames(round_trip) <- c("alg","sim",1:num_replicas)
swap_rate <- as.data.frame(matrix(nrow=0,ncol=(num_replicas+1))); colnames(swap_rate) <- c("alg","sim",1:(num_replicas-1))
iterations <- as.data.frame(matrix(nrow=0,ncol=(num_replicas+2))); colnames(iterations) <- c("alg","sim",1:num_replicas) #For the 4 replicas
pi_modes <- as.data.frame(matrix(nrow=0,ncol=4));colnames(pi_modes) <- c("alg","sim",1:2)
##### Low-dimensional multimodal setup #####
{
Rcpp::sourceCpp("functions/cpp_functions.cpp") #To use vec_to_num function
source("functions/r_functions.R")
p <- 16 #dimension
theta <- c()
theta[1] <- 6 #tail weight parameter
theta[2] <- 6 #tail weight parameter for second mode
# Modes definition
mod2 <- c(1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0)
mod3 <- c(0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1)
modes <- c(vec_to_num(mod2),  vec_to_num(mod3))
modes_list <- list(mod2,mod3)
### Compute true probability
pi.true <- rep(0,2^p)
for(i in 0:(2^p -1)){
pi.true[i+1] <-  lik_comp(NumberToVector(i,p),modes_list,theta,p)
}
pi.true <- pi.true/((1+exp(-theta[1]))^p + (1+exp(-theta[2]))^p)
sum(head(sort(-pi.true),n=20))
pi.true[modes+1]
sum(pi.true[modes+1])
}
}
}
}
if(chosen_dim=="highdim"){
Rcpp::sourceCpp("functions/cpp_functions_highdim.cpp") #To use eval_lik function
source("functions/r_functions.R") #To get dimension of the problem
#High dim we can have multiple temperatures
#we dont track distribution convergence
#we track visit to high probability states
check_number_replicas <- data_sum |> select(id,matches("^t\\d+")) #Select all temperatures columns
#Check which columns are full of NAs to exclude them
na_temps <- data_sum |>
select(matches("^t\\d+$")) |>  # Select columns of the form tX
summarize(across(everything(), ~ all(is.na(.x)))) |>   # Check if all values are NA
pivot_longer(everything(), names_to = "column", values_to = "is_all_na") |>   # Convert to long format
filter(is_all_na) |>   # Keep only columns where is_all_na is TRUE
pull(column)
na_bf <- paste0("bf",na_temps |> str_extract("\\d+"))
check_number_replicas <- check_number_replicas|> select(-all_of(na_temps))
check_dif_num_replica <- any(is.na(check_number_replicas))
if(check_dif_num_replica){#In case there's some ids with different number of replicas
ind_rep <- which(is.na(check_number_replicas),T)[1]
writeLines(paste0("id: ",check_number_replicas[ind_rep,1]," has less replicas"))
stop("Some of the chosen simulations have different number of replicas")
}else{
num_replicas <- ncol(check_number_replicas |> select(-id))
round_trip <- as.data.frame(matrix(NA,ncol=(num_replicas+2))); colnames(round_trip) <- c("alg","sim",1:num_replicas)
if(num_replicas>1){    swap_rate <- as.data.frame(matrix(NA,ncol=(num_replicas+1))); colnames(swap_rate) <- c("alg","sim",1:(num_replicas-1))}
iterations <- as.data.frame(matrix(NA,ncol=(num_replicas+2))); colnames(iterations) <- c("alg","sim",1:num_replicas)
list_of_states <- list()
iter_visit <- as.data.frame(matrix(NA,ncol=max(data_sum$simulations)+2,nrow=0));colnames(iter_visit) <- c("alg","state",1:max(data_sum$simulations))
loglik_visited <- as.data.frame(matrix(NA,ncol=4,nrow=0));colnames(loglik_visited) <- c("alg","sim","state","loglik")
max_lik <- as.data.frame(matrix(NA,ncol=4,nrow=0));colnames(max_lik) <- c("alg","sim","iteration","lik")
distances <- tibble(alg=character(),sim=numeric(),temperature=numeric(),mode=character(),min_dist=numeric(),max_dist=numeric(),min_iter=numeric(),max_iter=numeric())
}
}
time_taken <- as.data.frame(matrix(NA,ncol=2));colnames(time_taken) <- c("alg","time")
full_iter_names <- c() #To identify the list of full_iter with the corresponding algorithms
full_iter <- list()
k <- 1
Q <- 1
# Start creating datasets with information
for(i in 1:nrow(data_sum)){
data <- readRDS(file.path("results",data_sum[i,1]))
tot_sim <- data_sum |> slice(i)|> pull(simulations)
algorithm <- data_sum |> slice(i) |> pull(algorithm)
tot_iter <- data_sum |> slice(i) |> pull(iterations)
tot_swap <- data_sum |> slice(i) |> pull(total_swap)
interswap <- data_sum |> slice(i) |> pull(interswap)
temperatures <- as.numeric(data_sum |> slice(i) |> select(matches("^t\\d{1,2}$")))
temperatures <- temperatures[!is.na(temperatures)]# all the temperatures are in order and consecutive in the CSV file
if(algorithm=="PT_A_IIT"){algorithm <- "PT A-IIT m"}
if(algorithm=="PT_IIT_no_Z"){algorithm <- "PT-IIT no Z"}
if(algorithm=="PT_IIT_Z"){algorithm <- paste0("PT-IIT (",data_sum |> slice(i)|> pull(bf),")")}
if(algorithm=="PT_A_IIT_RF"){algorithm <- "PT A-IIT w"}
##### Optional add the ID of the simulation into the name of the algorithm
if(!(print_bimodal || print_multimodal)){algorithm <- paste0(algorithm,"(",data_sum |> slice(i) |> pull(id),")")}
print(data_sum[i,"algorithm"])
print(names(data))
#Extract time
temp <- as.data.frame(data[["time_taken"]])
if(!is_empty(temp)){
temp$alg <- algorithm
temp <- temp |> select(alg,everything())
colnames(temp) <- c("alg","time")
time_taken <- rbind(time_taken,temp)
}
### Specific extractions for lowdim example
if(chosen_dim=="lowdim"){
# Extract TVD
temp <- tibble(alg=algorithm,sim=1:tot_sim,tvd=data[["tvd"]])
tvd <- rbind(tvd,temp)
# Extract visit of modes
temp <- as.data.frame(data[["mode_visit"]])
colnames(temp) <- 1:ncol(temp)
temp$sim <- 1:tot_sim
temp$alg <- algorithm
temp$interswap <- data_sum |> slice(i) |> pull(interswap)
temp <- temp |> select(alg,sim,interswap,everything())
mode_visit <- rbind(mode_visit,temp)
#Extract dist. estimation for modes
temp <- data[["est_pi"]]
if(max(colSums(temp))>1){  #check if distribution estimate is not normalized
temp <- temp/colSums(temp)
}
temp <- as.data.frame(t(temp[modes+1,]))
colnames(temp) <- 1:ncol(temp)
temp$sim <- 1:tot_sim
temp$alg <- algorithm
temp <- temp |> select(alg,sim,everything())
pi_modes <- rbind(pi_modes,temp)
#Extract time to visit each of the modes
temp <- data[["time_visit"]]
if(!is_empty(temp)){
temp <- as.data.frame(t(temp[modes+1,])) #As many rows as simulations as many columns as modes
#define colnames
if(ncol(temp)==2){
colnames(temp) <- c("mod2","mod3")
}else   if(ncol(temp)==7){
colnames(temp) <- paste0("mod",1:7)
}else{stop("Number of modes in time_visit is not 7 or 2")}
temp$sim <- 1:tot_sim
temp$alg <- algorithm
temp <- temp |> select(alg,sim,everything()) |> pivot_longer(starts_with("mod"),names_to = "mode",values_to="time")
mode_time <- rbind(mode_time,temp)
}else{
print(paste0("ID: ",data_sum[i,"id"],"doesn't have time_visit"))
}
#Extract time to TVD measurement
temp <- data[["tvd_time_report"]]
if(!is_empty(temp)){
# colnames(temp) <- paste0("t",1:ncol(temp))
temp <- as.data.frame(temp)
temp$sim <- 1:tot_sim
temp$alg <- algorithm
temp <- temp |> select(alg,sim,everything())
temp <- temp |> pivot_longer(cols=starts_with("V"),names_to="measurement",values_to="time")
temp2 <- data[["tvd_report"]]
temp2 <- as.data.frame(temp2)
temp2$sim <- 1:tot_sim
temp2$alg <- algorithm
temp2 <- temp2 |> select(alg,sim,everything())
temp2 <- temp2 |> pivot_longer(cols=starts_with("V"),names_to="measurement",values_to="tvd")
temp <- left_join(temp,temp2,by=c("alg","sim","measurement"))
temp$measurement <- as.numeric(gsub("V","",temp$measurement))
tvd_report <- rbind(tvd_report,temp)
}
}
if(chosen_dim=="highdim"){
### Specific extractions for highdim example
if(data_sum|> slice(i) |> pull(model)=="bimodal"){
p <- data_sum$p;
}
if(data_sum|> slice(i) |> pull(model)=="gset"){
file_matrix <- paste0("gset/",data_sum |> slice(i)|> pull(file),".txt")
p <- readParameters(file_matrix)
}
##### Extract distance to modes
for(mm in 0:2){
output_name <- paste0("distance_mode",mm)
chosen_mode <- paste0("m",mm)
if(mm==0){output_name <- "distance_origin"}
### Extract minimum distances
temp_m <- as.data.frame(t(apply(data[[output_name]],c(2,3),min)))
colnames(temp_m) <- temperatures
temp_m$alg <- algorithm
temp_m$mode <- chosen_mode
temp_m$sim <- (1:tot_sim)
temp_m <- temp_m |> pivot_longer(-(alg:sim),names_to="temperature",values_to = "min_dist")
# head(temp_m)
### Extract maximum distances
temp_M <- as.data.frame(t(apply(data[[output_name]],c(2,3),max)))
colnames(temp_M) <- temperatures
temp_M$alg <- algorithm
temp_M$mode <- chosen_mode
temp_M$sim <- (1:tot_sim)
temp_M <- temp_M |> pivot_longer(-(alg:sim),names_to="temperature",values_to = "max_dist")
# head(temp_M)
temp_join <- left_join(temp_m,temp_M,by=c("alg","sim","mode","temperature"))
#### Extract iterations to find those distances
num_temp <- length(temperatures)
iters <- as.data.frame(matrix(,ncol=num_temp+2,nrow=tot_sim*2))
for(s in 1:tot_sim){
index_min <- 2*s - 1 #on odd entries
index_max <- 2*s #On even entries
iters[index_min:index_max,1] <- s#Identify simulation
iters[index_min,2] <- "min_iter"#Identify simulation
iters[index_max,2] <- "max_iter"#Identify simulation
iters[index_min,-(1:2)] <- apply(data[[output_name]][,,s],2,which.min)
iters[index_max,-(1:2)] <- apply(data[[output_name]][,,s],2,which.max)
}
colnames(iters) <- c("sim","measure",temperatures)
iters$alg <- algorithm
iters$mode <- chosen_mode
iters <- iters |>
select(alg,measure,mode,sim,everything()) |>
pivot_longer(-(alg:sim),names_to="temperature",values_to = "iter")
iters <- iters |>
pivot_wider(id_cols = c(alg,sim,temperature,mode),names_from = measure,values_from = iter)
temp_join <- left_join(temp_join,iters,by=c("alg","sim","temperature","mode")) |>
select(alg,sim, temperature,mode,min_dist,max_dist,min_iter,max_iter)
distances <- rbind(distances,temp_join)
}
#Find the row index of the first minimum value for each column (temperature)
# for (s in 1:tot_sim){
#   for(t in 1:length(temperatures)){
#     # Distance mode has rows=iterations, columns=replicas, slices=simulations
#     temp_tibble1 <- tibble(dist=data[["distance_mode1"]][,t,s],
#                           alg=algorithm,
#                           sim=s,
#                           temperature=temperatures[t],
#                           iteration=1:length(dist),
#                           mode="m1")
#     temp_tibble2 <- tibble(dist=data[["distance_mode2"]][,t,s],
#                           alg=algorithm,
#                           sim=s,
#                           temperature=temperatures[t],
#                           iteration=1:length(dist),
#                           mode="m2")
#     temp_tibble0 <- tibble(dist=data[["distance_origin"]][,t,s],
#                           alg=algorithm,
#                           sim=s,
#                           temperature=temperatures[t],
#                           iteration=1:length(dist),
#                           mode="m0")
#
#
#     distances <- rbind(distances,temp_tibble1,temp_tibble2,temp_tibble0)
#     rm(list=c("temp","temp_tibble1","temp_tibble2","temp_tibble0"))
#   }
# }
}
if(!is_empty(data[["round_trips"]]) && ncol(data[["round_trips"]])>1){
#Extract number of round trips rate
temp <- as.data.frame(data[["round_trips"]])
colnames(temp) <- 1:ncol(temp)
temp$sim <- 1:tot_sim
temp$alg <- algorithm
temp <- temp |> select(alg,sim,everything())
round_trip <- rbind(round_trip,temp)
# Extract replica swap rate
temp <- as.data.frame(data[["swap_rate"]])
colnames(temp) <- 1:ncol(temp)
temp$sim <- 1:tot_sim
temp$alg <- algorithm
temp <- temp |> select(alg,sim,everything())
swap_rate <- rbind(swap_rate,temp)
}
if(!is_empty(data[["total_iter"]])&& ncol(data[["total_iter"]])>1){
# Extract total iterations
dims<- dim(data[["total_iter"]])
full_iter[[k]] <- data[["total_iter"]]
full_iter_names[k] <- algorithm
k <- k+1;
temp <- as.data.frame(t(colSums(data[["total_iter"]])))/dims[1]
#temp is the average number of Rejection Free steps before trying a swap
colnames(temp) <- 1:ncol(temp)
temp$sim <- 1:tot_sim
temp$alg <- algorithm
temp <- temp |> select(alg,sim,everything())
iterations <- rbind(iterations,temp)
}
}
##### Delete first row with NA#####
# round_trip <- round_trip |> filter(!is.na(alg))
# if(exists("swap_rate")){swap_rate <- swap_rate |> filter(!is.na(alg))}
# iterations <- iterations |> filter(!is.na(alg))
# time_taken <- time_taken |> filter(!is.na(alg))
##### Export plots and tables #####
export_path <- paste0("C:/Users/ralex/Documents/src/paper_iit_pt/images/",chosen_dim,"_ex")
export_file_name <- paste0(paste0(chosen_ids,collapse="_"),"_",chosen_dim)
if(print_bimodal){export_file_name <- "bimodal"}
if(print_multimodal){export_file_name <- "multimodal"}
# full_path <- file.path(export_path,paste0("tvd_",export_file_name,".jpg"))
distances |>
group_by(alg,temperature,mode) |>
summarise(min_d=min(min_dist),
min_average=mean(min_dist),
fastest_min=min(min_iter),
mean_min=mean(min_iter),
slowest_min=max(min_iter))
view(distances |>
group_by(alg,temperature,mode) |>
summarise(min_d=min(min_dist),
min_average=mean(min_dist),
fastest_min=min(min_iter),
mean_min=mean(min_iter),
slowest_min=max(min_iter)))
